# Default values for ddm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.aggregion.com/ddm
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: master

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
updateStrategy:
  type: Recreate

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000
# allowPrivilegeEscalation: false

probes:
  liveness:
    enabled: false
    failureThreshold: 100
  readyness:
    enabled: false
    failureThreshold: 100

ingress:
  enabled: false
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/proxy-body-size: "100000m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "7200"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "7200"
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits: {}
  requests:
    cpu: 500m
    memory: 1024Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}
terminationGracePeriodSeconds: 140

busybox:
  image:
    repository: registry.aggregion.com/busybox
    pullPolicy: IfNotPresent
    tag: latest
sgx:
  enabled: false
  device: /dev/sgx
  aesmdSocketDir: /var/run/aesmd
  k8sPlugin:
    enabled: false
    resources:
      sgx.intel.com/enclave: 1
      sgx.intel.com/epc: 512Mi
      sgx.intel.com/provision: 1
aesmd:
  enabled: false
  image:
    repository: registry.aggregion.com/oasisprotocol/aesmd
    tag: master
    pullPolicy: IfNotPresent

repoBundler:
  enabled: true
  image:
    repository: registry.aggregion.com/repo-bundler
    tag: master
    pullPolicy: Always
  resources:
    limits: {}
    requests:
      cpu: 100m
      memory: 128Mi
  config:
    configPath: /opt # without trailing slash
    port: 8001
    gitHosts: []
    # - host: github.com
    #   # optional
    #   auth:
    #     type: token # also available ssh_key
    #     value: ""
    #     # type: ssh_key
    #     # # read about this here: https://docs.gitlab.com/ee/user/ssh.html#generate-an-ssh-key-pair
    #     # value: |
    #     #   -----BEGIN OPENSSH PRIVATE KEY-----
    #     #   b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
    #     #   NhAAAAAwEAAQAAAQEAzw1i2zo5IRoI9fE6CVMC6zHKSdCnOiY4HqXf2TJa64bP1dZjC2/C
    #   # optional
    #   check_certificate: true

server: # EXTERNAL
  service:
    type: ClusterIP
    port: 40001

manager: # INTERNAL
  service:
    type: ClusterIP
    port: 50001

managerUi:
  enabled: false
  resources:
    limits:
      cpu: "1"
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  service:
    type: ClusterIP
    port: 8000
  image:
    repository: registry.aggregion.com/ddm-manager
    pullPolicy: Always
    tag: master
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

podTemplateSpec:
  dnsPolicy: ClusterFirst
  dnsConfig: {}
  # nameservers: ["1.2.3.4"]
  # searches: ["ns1.svc.cluster-domain.example"]
  # options:
  #   - name: ndots
  #     value: "2"
  #   - name: edns0

config:
  logLevel: info
  occlumLogLevel: info
  debugUseParquetCache: false
  debugKeepArtifacts: false
  tmpPath: /tmp/ddm-tmp
  clickhouseForceConvertToTSV: false
  rjemMallocConf: retain:false,background_thread:true
  threadPools: {}
  # tokio: 8
  # rayon: 8
  # polars: 4
  clickhouseInstances: null
  clickhouseRepository: {}
  # type: metadata_service
  # params:
  #   endpoint: <url_to_metadataservice> # root endpoint without trailing slash
  #   access_token: <metadataservice_token>
  #   decryption_key: <base64_key>
  #   decryption_iv: <base64_iv>
  # type: config
  # params:
  #   test:
  #     url: http://localhost:8123
  #     database: default

  taskMemorySchedulerDisable: false
  taskConcurrencyLimit: 4
  concurrencyLimits: []
  # - task_types:
  #     - transform
  #     - join_by_tuples
  #     - join
  #   limit: 5
  # - task_types:
  #     - acquire_data_clickhouse
  #     - acquire_data
  #   limit: 10

  server: # EXTERNAL
    bindAddr: "0.0.0.0"
    countTraffic: true
  manager: # INTERNAL
    bindAddr: "0.0.0.0"
    countTraffic: true
  dataCacheFactory:
    params:
      baseDir: /occlum/run/mount/__ROOT
      hostPath: /opt/ddm-cache
  configsPath: /etc/ddm
  taskExecutors:
    services:
      # service name
      repo_bundler:
        # Service base url
        url: http://localhost:8001
        # optional headers
        headers: {}
        #   Authorization: Bearer <token>
    acquire_data:
      type: dataservice
      params:
        base_url: "http://dataservice"
        access_token: "eyJh...rBzE"
    make_bloom:
      type: default
    join:
      type: default
    join_by_tuples:
      type: default
      params:
        # valid values "city_hash64" or "md5"
        hash_type: "city_hash64"
    filter_bloom:
      type: default
    transform:
      type: default
    exec_remote:
      type: default
    acquire_data_remote:
      type: default
    concat:
      type: default
  eventExporters: []
  git: []

ecosystem:
  name: "Test Ecosystem"
  local_id: provider_1
  participants:
    provider_1:
      name: "Provider 1"
      authorized_keys:
      # openssl ec -in private.pem -pubout -out public.pem
      - |
        -----BEGIN PUBLIC KEY-----
        MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEViak1mkHr4WPvE968qsw0eOpXHt4
        9CdCK6zBek7ACgVx7+5nzY9200mhyvmKj5pFwVouSM5AeWMx8AKPaYsVNQ==
        -----END PUBLIC KEY-----
      grpc_url: "http://localhost:50001"
    provider_2:
      name: "Provider 2"
      authorized_keys:
      - |
        -----BEGIN PUBLIC KEY-----
        MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEzJXukX4RIXJl1TtTaSIFyY8dDIx+
        BZY/0nlYTPSYQQwqv/bOl8XUqaQje1GElA5Vl6JMIA60viDHPIplxEkXtg==
        -----END PUBLIC KEY-----
      grpc_url: "http://localhost:50002"
      # token_duration_secs: 60
      # protocol: http1 # enum[http1, http2, http1_and_http2]
wallet:
  keys:
    # openssl ecparam -genkey -noout -name prime256v1 | openssl pkcs8 -topk8 -nocrypt -out private.pem
    provider_1: |
      -----BEGIN PRIVATE KEY-----
      MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQg5jYg/ijPfDUdV2XT
      8Tb4UYxOkAZCyJirt4QRnkNgrOGhRANCAARWJqTWaQevhY+8T3ryqzDR46lce3j0
      J0IrrMF6TsAKBXHv7mfNj3bTSaHK+YqPmkXBWi5IzkB5YzHwAo9pixU1
      -----END PRIVATE KEY-----
