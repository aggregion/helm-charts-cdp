---
# Source: aggregion-cdp/templates/secrets-backend.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "aggregion-cdp-backend-test-secrets"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-backend-test"
    app.kubernetes.io/instance: "test"
type: Opaque
data:
  AUTH_JWT_SECRET: "YzJWamNtVjA="
  CLICKHOUSE_USER: "ZGVmYXVsdA=="
  CLICKHOUSE_PASSWORD: ""
  CH_USER: "ZGVmYXVsdA=="
  CH_PASSWORD: ""
  MONGO_URI: "bW9uZ29kYjovL21vbmdvOjI3MDE3L2RtcA=="
  MONGODB_URI: "bW9uZ29kYjovL21vbmdvOjI3MDE3L2RtcA=="
  RABBITMQ_URI: "YW1xcDovL3JhYmJpdA=="
  EOS_WALLET_PRIVATE_KEY: "NUtYVmpWRWVuOVJicHJ2bVZIYUxtVG1GdE1lODdHMjFKblY2Q3FTR0x1eUFBYmdRN3VZ"
  EOS_DECRYPT_PRIVATE_KEY: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0VBZ0VBTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFLQkcwd2F3SUJBUVFnQWtJeTdub01QVjFJWTA5Q1BFYTkKZlU2YVR2Q0sxK08xTDh0b0hPeUZFeWloUkFOQ0FBVE1hY0JvQ2RoMFVIZW9QZFBRNkNQak9PNGJxdzhZL09aQwptVkxnc1hmbjRxd2RBS01MYU1rS1ZzeHMvWmFJTjNwUG1JeitGTWV1U2hwOGltb1djb0dNCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0="
---
# Source: aggregion-cdp/templates/secrets-dataservice-envs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "aggregion-cdp-dataservice-test-secrets"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-dataservice-test"
    app.kubernetes.io/instance: "test"
type: Opaque
data:
  BLOCKCHAIN_WALLET_PRIVATE_KEY: NUtYVmpWRWVuOVJicHJ2bVZIYUxtVG1GdE1lODdHMjFKblY2Q3FTR0x1eUFBYmdRN3VZ
---
# Source: aggregion-cdp/templates/secrets-enclave-server-cfg-files.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "aggregion-cdp-enclave-test-file-secrets"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
type: Opaque
data:
  auth-key.pem: "UHJpdmF0ZUtleUJvZHk="
---
# Source: aggregion-cdp/templates/secrets-enclave-server-envs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "aggregion-cdp-enclave-test-secrets"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
type: Opaque
data:
  DMP_SECRET: "c2VjcmV0"
  CH_USER: "ZGVmYXVsdA=="
  CH_PASSWORD: ""
---
# Source: aggregion-cdp/templates/secrets-enclave-services-envs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "aggregion-cdp-enclave-test-services-secrets"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
type: Opaque
data:
  DMP_SECRET: "c2VjcmV0"
  CH_USER: "ZGVmYXVsdA=="
  CH_PASSWORD: ""
---
# Source: aggregion-cdp/templates/configmaps-backend-cfg-files.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "aggregion-cdp-backend-test-config-files"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-backend-test"
    app.kubernetes.io/instance: "test"
data:
  account.wallet: |
    {
      "orgId": "aggregiondmp",
      "publicKey": "EOS696B5YTMyVmMLnmN7C7oWWZ5SANf3NJ8nGWr1SN3MuEN7qZgM5",
      "privateKey": "5KXVjVEen9RbprvmVHaLmTmFtMe87G21JnV6CqSGLuyAAbgQ7uY"
    }
  local.json: |
    {
      "auth": {
        "localAccessPolicy": {
          "enabled": false
        }
      },
      "eos": {
        "initiateOrgId": "aggregiondmp",
        "walletsPath": "/home/node/app/eos-wallet"
      },
      "integrations": {
        "deployController": {
          "datalabvmClient": {
            "credentials": {
              "username": "admin",
              "password": "admin"
            },
            "apiUrl": "http://deploy-controller.deploy-controller.svc.cluster.local:5010/api",
            "apiVersion": "0.2.0",
            "clusterId": "selectel",
            "overwriteDomain": "localhost",
            "templatesPrefix": "persist",
            "s3WhitelistIps": "",
            "authUrl": "http://datalab-auth-helper.datalab-auth-helper.svc.cluster.local:19000/",
            "storageSizeGb": "50",
            "cpuLimit": "2",
            "memoryLimitGb": "8",
            "dmpNamespace": "default"
          }
        }
      },
      "enclave": {
        "auth": {
          "enabled": false,
          "id": "LOCAL",
          "ticket": {
            "type": "single",
            "value": "dmFsdWU=",
            "secret": "c2VjcmV0"
          }
        }
      },
      "cache": {
        "type": "redis",
        "redis": {
          "port": 6379,
          "password": "",
          "host": "redis",
          "keyPrefix": "agg:"
        }
      }
    }
---
# Source: aggregion-cdp/templates/configmaps-backend-envs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aggregion-cdp-backend-test-config
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-backend-test"
    app.kubernetes.io/instance: "test"
data:
  API_ENDPOINT: "http://aggregion-cdp-backend-test:8080/graphql"
  FILES_ENDPOINT: "http://aggregion-cdp-backend-test:8080/"
  SERVER_PORT: "15432"
  LOG_LEVEL: "debug"
  ALARM_NOTIFICATION_EMAIL: "alarm@aggregion-cdp.com"
  CLICKHOUSE_HOST: "clickhouse"
  CLICKHOUSE_PORT: "8123"
  CLICKHOUSE_DB: "dmp"
  EOS_NODE_URL: "http://testnet.blockchain.dmp.aggregion.com:9999"
  EOS_WALLET_ORG_ID: "orgId"
  EOS_WALLET_PUBLIC_KEY: "EOS696B5YTMyVmMLnmN7C7oWWZ5SANf3NJ8nGWr1SN3MuEN7qZgM5"
  ENCLAVE_LOCAL_PROVIDER_NAME: "demo"
  CURRENT_PROVIDER_NAME: "demo"
  ENCLAVE_ENDPOINT: "http://aggregion-cdp-enclave-test:8321/v1"
  ENCLAVE_SCRIPTS_AUDITORY: "sha256-1dbdf66d12ed88c56682a533bf8b703211a004743e7b6c9393bc70461175f7ba"
  ENCLAVE_SCRIPTS_DATALAB: "sha256-4be860062a8440188600ee3c57d65c59aa3a7d23feee022ab87c4b85386cfe89"
  ENCLAVE_SCRIPTS_SEGMENT: "sha256-eee58a0d585b02731979815f5985e9d08b8aa328b41c5b5954f67dde1344eed3"
  ENCLAVE_SCRIPTS_SEGMENT_CRITERIES: "sha256-af951a1b4078a926671d7fbcb244f0a4f6d6cb221d321cdb5ba569bb84a55f46"
  ENCLAVE_SCRIPTS_STATISTIC: "sha256-652c1df657735c02ff329216dd0d935a529447facdcf5919db54ab873067ebc7"
  ENCLAVE_DMP_API_SECRET: "secret"
  ENCLAVE_KNOWN_PROVIDERS: '["demo"]'
  EMAIL_NOTIFICATIONS: '{"enabled":true,"from":"support@aggregion-cdp.com","smtp":{"auth":{"pass":"password","user":"username"},"host":"aggregion-cdp.com","port":1025},"transport":"smtp"}'
  CALC_REPORT_DEFAULT_GOODS_DIRECTORY: "aggregion"
  DICTS_BRANDS: "global"
  DICTS_VENDORS: "global"
  SUPPORT_EMAIL: "support@aggregion-cdp.com"
  BASE_URL: "http://aggregion-cdp.com"
  DATA_SERVICE_ENDPOINT: "http://aggregion-cdp-dataservice-test:80/api/"
  DATA_SERVICE_TOKEN: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiRGF0YSBBY2Nlc3MgVG9rZW4gZm9yIHRoZSBhdXRob3JpemF0aW9uIGluIHRoZSBsb2NhbCBwcm92aWRlciBlbnZpcm9ubWVudCIsImlhdCI6MTYzMjY2MDY1OCwiaXNzIjoic3RhZ2VfcHJvdmlkZXIifQ.DLh9HQHXXTZuGSRrXf9uk6QBiikOHztcZ2aNC7x6wKg"
---
# Source: aggregion-cdp/templates/configmaps-dataservice-atlas-syncer-envs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aggregion-cdp-dataservice-test-atlas-syncer-config
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-dataservice-test"
    app.kubernetes.io/instance: "test"
data:
  PORT: "80"
  OWNER_ORG_ID: "orgId"
  ATLAS_BASE_URL: "http://5.188.130.169:21000"
  ATLAS_USERNAME: "admin"
  ATLAS_PASSWORD: "atlasR0cks!"
  DATASERVICE_BASE_URL: "http://aggregion-cdp-dataservice-test:80/api"
  DATASERVICE_TOKEN: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiRGF0YSBBY2Nlc3MgVG9rZW4gZm9yIHRoZSBhdXRob3JpemF0aW9uIGluIHRoZSBsb2NhbCBwcm92aWRlciBlbnZpcm9ubWVudCIsImlhdCI6MTYzMjY2MDY1OCwiaXNzIjoic3RhZ2VfcHJvdmlkZXIifQ.DLh9HQHXXTZuGSRrXf9uk6QBiikOHztcZ2aNC7x6wKg"
  RABBITMQ_URL: "amqp://127.0.0.1"
  DATASET_QUEUE_NAME: "datasets"
  INSTANCE_QUEUE_NAME: "instances"
---
# Source: aggregion-cdp/templates/configmaps-dataservice-envs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aggregion-cdp-dataservice-test-config
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-dataservice-test"
    app.kubernetes.io/instance: "test"
data:
  APP_NAME: "dataservice-api"
  LOG_LEVEL: "trace"
  LOG_PRETTY_PRINT: "true"
  NODE_ENV: "development"
  PORT: "9045"
  MONGO_DB_URI: "mongodb://127.0.0.1:27017/ds-api"
  MONGO_DB_URI_TEST: "mongodb://agg-dev:18005/ds-api-tests"
  MONGO_DEBUG: "true"
  TOKEN_EXPIRATION_TIME_IN_SEC: "2.6784e+06"
  TOKEN_SECRET_KEY: "data_access_token_secret_key"
  TOKEN_ISSUER: "local_provider_name"
  BLOCKCHAIN_NODE_URL: "http://testnet.blockchain.dmp.aggregion.com:9999"
  BLOCKCHAIN_WALLET_ORG_ID: "orgId"
  BLOCKCHAIN_WALLET_PUBLIC_KEY: "EOS696B5YTMyVmMLnmN7C7oWWZ5SANf3NJ8nGWr1SN3MuEN7qZgM5"
  BCMQ_ORG_DECRYPT_KEY: "it_doesn_not_matter"
  BCMQ_POLLING_INTERVAL: "200"
  TRINO_HOST: "localhost"
  TRINO_PORT: "8080"
  RABBITMQ_URI: "amqp://127.0.0.1"
---
# Source: aggregion-cdp/templates/configmaps-dlproxy-cfg-files.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aggregion-cdp-backend-test-dlproxy-config-files
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-backend-test"
    app.kubernetes.io/instance: "test"
data:
  default.conf: |
    map $http_upgrade $connection_upgrade {
        default          upgrade;
        ''               '';
    }

    server {
        listen 8080 default_server;
        listen [::]:8080 default_server;

        root   /var/www/html;

        location ~ /datalab/vm/([a-fA-F0-9-]+)/access {
                set              $vmid $1;

                proxy_pass                              http://datalab-auth.datalab-$vmid.svc.cluster.local:8000;
                proxy_set_header Datalab-Vm-Id          $vmid;
                # proxy_set_header Host                   $1.datalab.{ domain };

                resolver kube-dns.kube-system.svc.cluster.local;

                rewrite /datalab/vm/([^/]+)/(.+) /$2 break;

                # proxy_pass                              { datalabExternalEndpoint };
                proxy_set_header Host                   $http_host;
                proxy_set_header Upgrade                $http_upgrade;
                proxy_set_header Connection             $connection_upgrade;
                proxy_set_header X-Real-IP              $remote_addr;
                proxy_set_header X-Forwarded-For        $remote_addr;
                proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
                proxy_set_header Proxy                  "";
                proxy_connect_timeout                   5s;
                proxy_send_timeout                      360s;
                proxy_read_timeout                      360s;
                proxy_buffering                         off;
                proxy_buffer_size                       4k;
                proxy_buffers                           4 4k;
                proxy_max_temp_file_size                128m;
                proxy_request_buffering                 on;
                proxy_http_version                      1.1;
                proxy_cookie_domain                     off;
                proxy_cookie_path                       off;
                proxy_next_upstream                     error timeout;
                proxy_next_upstream_timeout             0;
                proxy_next_upstream_tries               3;
                proxy_redirect                          off;

                port_in_redirect off;
                client_max_body_size                    8m;
        }
    }
---
# Source: aggregion-cdp/templates/configmaps-enclave-server-cfg-files.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aggregion-cdp-enclave-test-config-files
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
data:
  local.json: |
    {
      "server": {
        "auth": {
          "disableAuthentication": true
        }
      },
      "remoteEnclaveProvider": {
        "type": "http",
        "serviceSourceProvider": {
          "type": "mock",
          "services": [{
              "service": "enclave-service",
              "version": "1",
              "description": "enclave-service",
              "protocol": "default",
              "provider": "demo",
              "endpoint": "http://demo"
            }
          ]
        }
      }
    }
---
# Source: aggregion-cdp/templates/configmaps-enclave-server-envs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aggregion-cdp-enclave-test-config
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
data:
  ENCLAVE_ENDPOINT: "http://aggregion-cdp-enclave-test:8321/v1"
  ENCLAVE_SCRIPTS_AUDITORY: "sha256-1dbdf66d12ed88c56682a533bf8b703211a004743e7b6c9393bc70461175f7ba"
  ENCLAVE_SCRIPTS_DATALAB: "sha256-4be860062a8440188600ee3c57d65c59aa3a7d23feee022ab87c4b85386cfe89"
  ENCLAVE_SCRIPTS_SEGMENT: "sha256-eee58a0d585b02731979815f5985e9d08b8aa328b41c5b5954f67dde1344eed3"
  ENCLAVE_SCRIPTS_SEGMENT_CRITERIES: "sha256-af951a1b4078a926671d7fbcb244f0a4f6d6cb221d321cdb5ba569bb84a55f46"
  ENCLAVE_SCRIPTS_STATISTIC: "sha256-652c1df657735c02ff329216dd0d935a529447facdcf5919db54ab873067ebc7"
  CONFIG_FILE: "/opt/enclave/config/local.json"
  PROVIDE_NAME: "demo"
  SERVER_PORT: "8321"
  TMP_DIR: "/tmp"
  CH_TYPE: "real"
  CH_HOST: "clickhouse"
  CH_PORT: "8123"
  CH_DATABASE_NAME: "dmp"
  SERVICES_HOST: "localhost"
  SERVICES_PORT: "8322"
  DMP_BASE_URL: "http://aggregion-cdp-backend-test:8080/enclave"
  DATASERVICE_BASE_URL: "http://aggregion-cdp-dataservice-test:80"
---
# Source: aggregion-cdp/templates/configmaps-enclave-services-envs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aggregion-cdp-enclave-test-services-config
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
data:
  SERVER_PORT: "8322"
  TMP_DIR: "/tmp"
  CH_TYPE: "real"
  CH_HOST: "clickhouse"
  CH_PORT: "8123"
  CH_DATABASE_NAME: "dmp"
---
# Source: aggregion-cdp/templates/pvc-backend.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "aggregion-cdp-backend-test-claim"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-backend-test"
    app.kubernetes.io/instance: "test"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "10G"
---
# Source: aggregion-cdp/templates/service-backend.yaml
apiVersion: v1
kind: Service
metadata:
  name: "aggregion-cdp-backend-test"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-backend-test"
    app.kubernetes.io/instance: "test"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: httpapi
      protocol: TCP
      name: httpapi
  selector:
    
    app.kubernetes.io/name: "aggregion-cdp-backend-test"
    app.kubernetes.io/instance: "test"
---
# Source: aggregion-cdp/templates/service-dataservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: "aggregion-cdp-dataservice-test"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-dataservice-test"
    app.kubernetes.io/instance: "test"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: httpapi
      protocol: TCP
      name: httpapi
  selector:
    
    app.kubernetes.io/name: "aggregion-cdp-dataservice-test"
    app.kubernetes.io/instance: "test"
---
# Source: aggregion-cdp/templates/service-dlproxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: "aggregion-cdp-backend-test-dlproxy"
  labels:
    
    app.kubernetes.io/name: "aggregion-cdp-backend-test-dlproxy"
    app.kubernetes.io/instance: "test"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: httpproxy
      protocol: TCP
      name: httpproxy
  selector:
    
    app.kubernetes.io/name: "aggregion-cdp-backend-test-dlproxy"
    app.kubernetes.io/instance: "test"
---
# Source: aggregion-cdp/templates/service-enclave-server.yaml
apiVersion: v1
kind: Service
metadata:
  name: aggregion-cdp-enclave-test
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
spec:
  type: ClusterIP
  ports:
    - port: 8321
      targetPort: httpenclave
      protocol: TCP
      name: httpenclave
  selector:
    
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
---
# Source: aggregion-cdp/templates/service-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: "aggregion-cdp-frontend-test"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-frontend-test"
    app.kubernetes.io/instance: "test"
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    
    app.kubernetes.io/name: "aggregion-cdp-frontend-test"
    app.kubernetes.io/instance: "test"
---
# Source: aggregion-cdp/templates/service-scone-las.yaml
apiVersion: v1
kind: Service
metadata:
  name: "aggregion-cdp-enclave-test-scone-las"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
spec:
  type: NodePort
  externalName: "las"
  ports:
    - port: 18766
      targetPort: lasport
      protocol: TCP
      name: lasport
  selector:
    name: "aggregion-cdp-enclave-test-scone-las"
---
# Source: aggregion-cdp/templates/daemonset-scone-las.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: "aggregion-cdp-enclave-test-scone-las"
  labels:
    name: "aggregion-cdp-enclave-test-scone-las"
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
spec:
  selector:
    matchLabels:
      name: "aggregion-cdp-enclave-test-scone-las"
  template:
    metadata:
      labels:
        name: "aggregion-cdp-enclave-test-scone-las"
    spec:
      hostNetwork: true
      imagePullSecrets:
        - name: aggregionregistry
      restartPolicy: Always
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: las
          image: sconecuratedimages/las-scone:latest
          image: "registry.aggregion.com/sconecuratedimages/aggregion:las-scone4.2.1"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            privileged: true
          env:
            - name: SCONE_MODE
              value: hw
          ports:
            - containerPort: 18766
              hostPort: 18766
              name: lasport
          volumeMounts:
            - mountPath: "/dev/sgx"
              name: dev-sgx
          resources:
            {}
      volumes:
        - name: dev-sgx
          hostPath:
            path: "/dev/sgx"
      nodeSelector:
        kube: sgx
---
# Source: aggregion-cdp/templates/deployment-backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "aggregion-cdp-backend-test"
  annotations:
      reloader.stakater.com/auto: "true"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-backend-test"
    app.kubernetes.io/instance: "test"
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: "aggregion-cdp-backend-test"
      app.kubernetes.io/instance: "test"
  template:
    metadata:
      labels:
        
        app.kubernetes.io/name: "aggregion-cdp-backend-test"
        app.kubernetes.io/instance: "test"
    spec:
      imagePullSecrets:
        - name: aggregionregistry
      restartPolicy: Always
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: "backend-api"
          securityContext:
            {}
          image: "registry.aggregion.com/dmp-backend:develop"
          imagePullPolicy: IfNotPresent
          ports:
            - name: httpapi
              containerPort: 15432
          args:
            - npm
            - run
            - start:api
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
            - secretRef:
                name: "aggregion-cdp-backend-test-secrets"
          resources:
            {}
          volumeMounts:
            - mountPath: /home/node/app/config/local.json
              subPath: local.json
              name: local-config-volume
            - mountPath: "/home/node/app/eos-wallet/agg/aggregiondmp.wallet"
              subPath: "account.wallet"
              name: local-config-volume
            - name: data
              mountPath: /data/datalabscripts
              subPath: datalabscripts-data
        - name: "backend-migration"
          securityContext:
            {}
          image: "registry.aggregion.com/dmp-backend:develop"
          imagePullPolicy: IfNotPresent
          args:
            - npm
            - run
            - migrate:up
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
            - secretRef:
                name: "aggregion-cdp-backend-test-secrets"
          resources:
            {}
          volumeMounts:
            - mountPath: /home/node/app/config/local.json
              subPath: local.json
              name: local-config-volume
        - name: "backend-matching-status-watcher"
          image: "registry.aggregion.com/dmp-backend:develop"
          imagePullPolicy: "Always"
          args:
            - npm
            - run
            - start:worker:matching_status_watcher
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
            - secretRef:
                name: "aggregion-cdp-backend-test-secrets"
          resources:
            {}
          env:
            - name: "HEALTH_CHECK_PORT"
              value: "8305"
          # livenessProbe:
          #   httpGet:
          #     path: /healthcheck
          #     port: 8305
          #   failureThreshold: 5
          #   periodSeconds: 30
          #   timeoutSeconds: 20
          volumeMounts:
            - mountPath: /home/node/app/config/local.json
              subPath: local.json
              name: local-config-volume
        - name: "backend-matching-status-response-watcher"
          image: "registry.aggregion.com/dmp-backend:develop"
          imagePullPolicy: "Always"
          args:
            - npm
            - run
            - start:worker:matching_status_response_watcher
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
            - secretRef:
                name: "aggregion-cdp-backend-test-secrets"
          resources:
            {}
          env:
            - name: "HEALTH_CHECK_PORT"
              value: "8305"
          # livenessProbe:
          #   httpGet:
          #     path: /healthcheck
          #     port: 8305
          #   failureThreshold: 5
          #   periodSeconds: 30
          #   timeoutSeconds: 20
          volumeMounts:
            - mountPath: /home/node/app/config/local.json
              subPath: local.json
              name: local-config-volume
        - name: "backend-dataset-uploader"
          image: "registry.aggregion.com/dmp-backend:develop"
          imagePullPolicy: "Always"
          args:
            - npm
            - run
            - start:worker:dataset_uploader
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
            - secretRef:
                name: "aggregion-cdp-backend-test-secrets"
          resources:
            {}
          env:
            - name: "HEALTH_CHECK_PORT"
              value: "8308"
          # livenessProbe:
          #   httpGet:
          #     path: /healthcheck
          #     port: 8308
          #   failureThreshold: 5
          #   periodSeconds: 30
          #   timeoutSeconds: 20
          volumeMounts:
            - mountPath: /home/node/app/config/local.json
              subPath: local.json
              name: local-config-volume
            - mountPath: "/home/node/app/eos-wallet/agg/aggregiondmp.wallet"
              subPath: "account.wallet"
              name: local-config-volume
        - name: "backend-blockchain-updater"
          image: "registry.aggregion.com/dmp-backend:develop"
          imagePullPolicy: "Always"
          args:
            - npm
            - run
            - start:worker:blockchain_updater
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
            - secretRef:
                name: "aggregion-cdp-backend-test-secrets"
          resources:
            {}
          env:
            - name: "HEALTH_CHECK_PORT"
              value: "8308"
          # livenessProbe:
          #   httpGet:
          #     path: /healthcheck
          #     port: 8308
          #   failureThreshold: 5
          #   periodSeconds: 30
          #   timeoutSeconds: 20
          volumeMounts:
            - mountPath: /home/node/app/config/local.json
              subPath: local.json
              name: local-config-volume
            - mountPath: "/home/node/app/eos-wallet/agg/aggregiondmp.wallet"
              subPath: "account.wallet"
              name: local-config-volume
        - name: "backend-segments"
          image: "registry.aggregion.com/dmp-backend:develop"
          imagePullPolicy: "Always"
          args:
            - npm
            - run
            - start:worker:segments
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
            - secretRef:
                name: "aggregion-cdp-backend-test-secrets"
          resources:
            {}
          env:
            - name: "HEALTH_CHECK_PORT"
              value: "8309"
          # livenessProbe:
          #   httpGet:
          #     path: /healthcheck
          #     port: 8309
          #   failureThreshold: 5
          #   periodSeconds: 30
          #   timeoutSeconds: 20
          volumeMounts:
            - mountPath: /tmp/segment
              name: tmp
            - mountPath: /home/node/app/config/local.json
              subPath: local.json
              name: local-config-volume
        - name: "backend-bc-checker"
          image: "registry.aggregion.com/dmp-backend:develop"
          imagePullPolicy: "Always"
          args:
            - npm
            - run
            - start:worker:bc_checker
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
            - secretRef:
                name: "aggregion-cdp-backend-test-secrets"
          resources:
            {}
          volumeMounts:
            - mountPath: /home/node/app/config/local.json
              subPath: local.json
              name: local-config-volume
        - name: "backend-bc-syncer"
          image: "registry.aggregion.com/dmp-backend:develop"
          imagePullPolicy: "IfNotPresent"
          args:
            - npm
            - run
            - start:worker:bc_syncer
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
            - secretRef:
                name: "aggregion-cdp-backend-test-secrets"
          resources:
            {}
          volumeMounts:
            - mountPath: /home/node/app/config/local.json
              subPath: local.json
              name: local-config-volume
            - mountPath: "/home/node/app/eos-wallet/agg/aggregiondmp.wallet"
              subPath: "account.wallet"
              name: local-config-volume
        - name: "backend-crond"
          image: "registry.aggregion.com/cron-curl:0.0.1"
          imagePullPolicy: "IfNotPresent"
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
            - secretRef:
                name: "aggregion-cdp-backend-test-secrets"
          env:
            - name: "CRON_STRINGS"
              value: "*/5 * * * * curl http://localhost:9050"
          resources:
            {}
          volumeMounts:
            - mountPath: /home/node/app/config/local.json
              subPath: local.json
              name: local-config-volume

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "aggregion-cdp-backend-test-claim"
        - name: tmp
          hostPath:
            path: "/tmp/aggregion-cdp-backend-test"
        - name: local-config-volume
          configMap:
            name: "aggregion-cdp-backend-test-config-files"
            items:
              - key: local.json
                path: local.json
              - key: "account.wallet"
                path: "account.wallet"
  strategy:
    type: Recreate
---
# Source: aggregion-cdp/templates/deployment-dataservice.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "aggregion-cdp-dataservice-test"
  annotations:
      reloader.stakater.com/auto: "true"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-dataservice-test"
    app.kubernetes.io/instance: "test"
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: "aggregion-cdp-dataservice-test"
      app.kubernetes.io/instance: "test"
  template:
    metadata:
      labels:
        
        app.kubernetes.io/name: "aggregion-cdp-dataservice-test"
        app.kubernetes.io/instance: "test"
    spec:
      imagePullSecrets:
        - name: aggregionregistry
      restartPolicy: Always
      serviceAccountName: default
      containers:
        - name: "dataservice-api"
          securityContext:
            {}

          image: "registry.aggregion.com/dataservice-api:master"
          imagePullPolicy: IfNotPresent
          ports:
            - name: httpapi
              containerPort: 9045
          args:
            - npm
            - run
            - start:prod

          envFrom:
            - configMapRef:
                name: "aggregion-cdp-dataservice-test-config"
            - secretRef:
                name: "aggregion-cdp-dataservice-test-secrets"

        - name: "dataset-syncer"
          securityContext:
            {}

          image: "registry.aggregion.com/dataservice-api:master"
          imagePullPolicy: IfNotPresent
          args:
            - npm
            - run
            - start:worker:dataset-syncer:prod

          envFrom:
            - configMapRef:
                name: "aggregion-cdp-dataservice-test-config"
            - secretRef:
                name: "aggregion-cdp-dataservice-test-secrets"

        - name: "dataset-updater"
          securityContext:
            {}

          image: "registry.aggregion.com/dataservice-api:master"
          imagePullPolicy: IfNotPresent
          args:
            - npm
            - run
            - start:worker:dataset-updater:prod

          envFrom:
            - configMapRef:
                name: "aggregion-cdp-dataservice-test-config"
            - secretRef:
                name: "aggregion-cdp-dataservice-test-secrets"

        - name: "instance-syncer"
          securityContext:
            {}

          image: "registry.aggregion.com/dataservice-api:master"
          imagePullPolicy: IfNotPresent
          args:
            - npm
            - run
            - start:worker:instance-syncer:prod

          envFrom:
            - configMapRef:
                name: "aggregion-cdp-dataservice-test-config"
            - secretRef:
                name: "aggregion-cdp-dataservice-test-secrets"

        - name: "atlas-entity-syncer"
          securityContext:
            {}
          image: "registry.aggregion.com/atlas-entity-syncer:latest"
          args:
            - npm
            - run
            - start:prod

          ports:
            - name: atlassyncport
              containerPort: 80

          envFrom:
            - configMapRef:
                name: "aggregion-cdp-dataservice-test-atlas-syncer-config"
---
# Source: aggregion-cdp/templates/deployment-dlproxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "aggregion-cdp-backend-test-dlproxy"
  annotations:
      reloader.stakater.com/auto: "true"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-backend-test"
    app.kubernetes.io/instance: "test"
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: "aggregion-cdp-backend-test-dlproxy"
      app.kubernetes.io/instance: "test"
  template:
    metadata:
      labels:
        
        app.kubernetes.io/name: "aggregion-cdp-backend-test-dlproxy"
        app.kubernetes.io/instance: "test"
    spec:
      imagePullSecrets:
        - name: aggregionregistry
      restartPolicy: Always
      serviceAccountName: default
      securityContext:
        null
      containers:
        - name: "backend-dlproxy"
          securityContext:
            null
          image: "nginx:1.19-alpine"
          imagePullPolicy: IfNotPresent
          ports:
            - name: httpproxy
              containerPort: 8080
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /etc/nginx/conf.d
              name: local-config-volume

      volumes:
        - name: local-config-volume
          configMap:
            name: "aggregion-cdp-backend-test-dlproxy-config-files"
---
# Source: aggregion-cdp/templates/deployment-enclave-scone.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "aggregion-cdp-enclave-test"
  annotations:
      reloader.stakater.com/auto: "true"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: "aggregion-cdp-enclave-test"
      app.kubernetes.io/instance: "test"
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8321"
        prometheus.io/scrape: "true"
      labels:
        
        app.kubernetes.io/name: "aggregion-cdp-enclave-test"
        app.kubernetes.io/instance: "test"
    spec:
      hostname: "enclave"
      imagePullSecrets:
        - name: aggregionregistry
      restartPolicy: Always
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: "enclave-server"
          securityContext:
            privileged: true
          image: "registry.aggregion.com/enclave-server-nodejs:main"
          imagePullPolicy: IfNotPresent
          ports:
            - name: httpenclave
              containerPort: 8321
              protocol: TCP
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-enclave-test-config"
            - secretRef:
                name: "aggregion-cdp-enclave-test-secrets"
          env:
            - name: SCONE_MODE
              value: hw
            - name: LAS_ADDR
              value: "las:18766"
          # livenessProbe:
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck
              port: 8321
            initialDelaySeconds: 60
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /config/local.json
              subPath: local.json
              name: local-config-volume
            - mountPath: /var/keys/auth-key.pem
              subPath: auth-key.pem
              name: local-secrets-volume
            - mountPath: "/dev/sgx"
              name: dev-sgx

        - name: "enclave-services"
          securityContext:
            {}
          image: "registry.aggregion.com/enclave-external-services:develop"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-enclave-test-services-config"
            - secretRef:
                name: "aggregion-cdp-enclave-test-services-secrets"
          # livenessProbe:
          # readinessProbe:
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp

      volumes:
        - name: tmp
          hostPath:
            path: "/tmp/aggregion-cdp-enclave-test"
        - name: local-config-volume
          configMap:
            name: "aggregion-cdp-enclave-test-config-files"
        - name: local-secrets-volume
          secret:
            secretName: "aggregion-cdp-enclave-test-file-secrets"
        - name: dev-sgx
          hostPath:
            path: "/dev/sgx"
      nodeSelector:
        kube: sgx
---
# Source: aggregion-cdp/templates/deployment-enclave.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "aggregion-cdp-enclave-test"
  annotations:
      reloader.stakater.com/auto: "true"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: "aggregion-cdp-enclave-test"
      app.kubernetes.io/instance: "test"
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8321"
        prometheus.io/scrape: "true"
      labels:
        
        app.kubernetes.io/name: "aggregion-cdp-enclave-test"
        app.kubernetes.io/instance: "test"
    spec:
      hostname: "enclave"
      imagePullSecrets:
        - name: aggregionregistry
      restartPolicy: Always
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: "enclave-server"
          securityContext:
            {}
          image: "registry.aggregion.com/enclave-server-nodejs:main"
          imagePullPolicy: IfNotPresent
          ports:
            - name: httpenclave
              containerPort: 8321
              protocol: TCP
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-enclave-test-config"
            - secretRef:
                name: "aggregion-cdp-enclave-test-secrets"
          # livenessProbe:
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck
              port: 8321
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /opt/enclave/config/local.json
              subPath: local.json
              name: local-config-volume
            - mountPath: /var/keys/auth-key.pem
              subPath: auth-key.pem
              name: local-secrets-volume

        - name: "enclave-services"
          securityContext:
            {}
          image: "registry.aggregion.com/enclave-external-services:develop"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-enclave-test-services-config"
            - secretRef:
                name: "aggregion-cdp-enclave-test-services-secrets"
          # livenessProbe:
          # readinessProbe:
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp

      volumes:
        - name: tmp
          hostPath:
            path: "/tmp/aggregion-cdp-enclave-test"
        - name: local-config-volume
          configMap:
            name: "aggregion-cdp-enclave-test-config-files"
        - name: local-secrets-volume
          secret:
            secretName: "aggregion-cdp-enclave-test-file-secrets"
---
# Source: aggregion-cdp/templates/deployment-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "aggregion-cdp-frontend-test"
  annotations:
      reloader.stakater.com/auto: "true"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-frontend-test"
    app.kubernetes.io/instance: "test"
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: "aggregion-cdp-frontend-test"
      app.kubernetes.io/instance: "test"
  template:
    metadata:
      labels:
        
        app.kubernetes.io/name: "aggregion-cdp-frontend-test"
        app.kubernetes.io/instance: "test"
    spec:
      imagePullSecrets:
        - name: aggregionregistry
      restartPolicy: Always
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: "frontend"
          securityContext:
            {}
          image: "registry.aggregion.com/dmp-frontend:develop"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: "aggregion-cdp-backend-test-config"
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {}
---
# Source: aggregion-cdp/templates/ingress-enclave-server.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: "aggregion-cdp-enclave-test"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-enclave-test"
    app.kubernetes.io/instance: "test"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 128000m
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  rules:
    - host: "enclave.local"
      http:
        paths:
          - path: "/"
            backend:
              serviceName: "aggregion-cdp-enclave-test"
              servicePort: 8321
---
# Source: aggregion-cdp/templates/ingress-frontend.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: "aggregion-cdp-frontend-test"
  labels:
    helm.sh/chart: aggregion-cdp-0.1.34
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: "aggregion-cdp-frontend-test"
    app.kubernetes.io/instance: "test"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 128000m
spec:
  rules:
    - host: "demo.local"
      http:
        paths:
          - path: "/graphql"
            backend:
              serviceName: "aggregion-cdp-backend-test"
              servicePort: 8080
          - path: "/graphql-subscriptions"
            backend:
              serviceName: "aggregion-cdp-backend-test"
              servicePort: 8080
          - path: "/files"
            backend:
              serviceName: "aggregion-cdp-backend-test"
              servicePort: 8080
          - path: "/datalab/vm"
            backend:
              serviceName: "aggregion-cdp-backend-test-dlproxy"
              servicePort: 8080
          - path: "/auth/datalab"
            backend:
              serviceName: "aggregion-cdp-backend-test"
              servicePort: 8080
          - backend:
              serviceName: "aggregion-cdp-frontend-test"
              servicePort: 5000
