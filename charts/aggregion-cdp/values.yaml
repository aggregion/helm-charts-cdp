# Default values for aggregion-cdp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets:
  - name: aggregionregistry

# all available providers
providers: ["demo"]
providerNames:
  demo:
    ru: "Розничная сеть"
    en: "Retail"
providerLinks:
    # this config url is used for accessing to another enclaves
  - name: demo
    url: http://demo
metadataParams:
  credentials:
    encryptionKey: "it should be key as string with 32b size..."
    iv: "it should be initialize vector as string with 16b size..."

nameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: "default"


livenessProbe:
  enabled: true
  livenessPath: /healthcheck/liveness
  healthcheckPort: 9047
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  shutdownTimeoutMs: 5000

readinessProbe:
  enabled: true
  readinessPath: /healthcheck/readiness
  healthcheckPort: 9047
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  shutdownTimeoutMs: 5000

metrics:
  enabled: false
  path: "/metrics"
  serviceMonitor:
    enabled: false

common:
  curl:
    repository: curlimages/curl
    pullPolicy: IfNotPresent
    tag: "7.87.0"

gatekeeper:
  # must be always `true` for production, it can be `false` only for dev purposes
  enabled: false
  image:
    # gatekeeper image repository
    repository: "registry.aggregion.com/gatekeeper"
    # gatekeeper image tag
    tag: "1.4.2"
    # gatekeeper image pull policy
    pullPolicy: IfNotPresent
  # gatekeeper config
  config:
    # the client id for the 'client' application
    clientId: dcp
    # the secret associated to the 'client' application (get it from Keycloak Administration Console)
    clientSecret: XXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxx
    # is the URL for retrieve the OpenID configuration (get it from Keycloak Administration Console -> Realm settings -> Endpoints -> OpenID Endpoint Configuration)
    discoveryUrl: http://keycloak/realms/ad1/.well-known/openid-configuration
    # option blocks all requests without valid token on all basic HTTP methods (DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, TRACE)
    enableDefaultDeny: true
    # switch on json logging rather than text
    enableJsonLogging: true
    # indicates we should redirect to the identity provider for logging out
    enableLogoutRedirect: true
    # enable the prometheus metrics collector on /oauth/metrics
    enableMetrics: false
    # set `false` if  you wish to ignore using refresh tokens and re-auth on expiration of access token
    enableRefreshTokens: true
    # access and refresh tokens are session only i.e. removed on browser close
    enableSessionCookies: true
    # encryption key used to encrypt the refresh token
    encryptionKey: xxXXxxXXxxXXxxXX
    # skips the tls verification for openid provider communication
    skipOpenidProviderTlsVerify: true
    # according RFC client id should not be checked on access token
    skipAccessTokenClientIdCheck: true
    # port for main listener
    listen: 3000
    # port for  admin-only endpoints (live-status, debug, prometheus...)
    listenAdmin: 4000
    # enforces the cookie as secure
    secureCookie: false
    # redirection url for the oauth callback url
    redirectionUrl: https://test.youdomaindom.com
    # url for a store used to hold the refresh tokens, e.g redis://127.0.0.1:6379, file:///etc/tokens.file" or null (if you want to store refresh tokens in cookie)
    storeUrl: redis://127.0.0.1:6379
    # the read timeout on the http server
    serverReadTimeout: 600s
    # the write timeout on the http server
    serverWriteTimeout: 600s
    # the idle timeout on the http server
    serverIdleTimeout: 600s
    # path to custom template displayed for signin, to disable sign in page showing set empty value
    signInPage: /opt/gatekeeper/templates/sign_in.html.tmpl
    # path to custom template used for access forbidden, to disable this page showing set empty value
    forbiddenPage: /opt/gatekeeper/templates/forbidden.html.tmpl
    # the timeout for upstream header response
    upstreamResponseHeaderTimeout: 600s
    # switches on debug logging
    verbose: true
    # tags (used in signInPage template) is a map where key is identity provider id in the template and value is identity provider id in Keycloak
    tags:
      title: "DCP | Вход"
      aggregion: "aggregion-oidc"
      activeDirectory: "oidc"

# common config of Atlas used by atlas-entity-syncer and metadata-seed
atlas:
  baseUrl: "http://atlas.local"
  # auth settings
  auth:
    # auth type, can be "basic" and "bearer"
    type: basic
    # config for basic auth type
    basic:
      username: admin
      password: admin
    # config for bearer auth type
    bearer:
      # id of the client created in Keycloak for Atlas
      clientId: atlas
      # client secret of the client created in Keycloak for Atlas
      clientSecret: atlasclientsecret
      # url to get access token from Keycloak by service account
      tokenUrl: https://keycloak/realms/aggregion/protocol/openid-connect/token

frontend:
  enabled: true
  replicaCount: 1
  annotations:
    reloader.stakater.com/auto: "true"
  image:
    repository: registry.aggregion.com/dmp-frontend
    pullPolicy: IfNotPresent
    tag: "release-22_sep-47de5668-1889"
  restartPolicy: Always
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  configs:
    listenPort: 5000
    currency: RUB
  service:
    type: ClusterIP
    port: 5000
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 128000m
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/limit-rps: "1000"
      nginx.ingress.kubernetes.io/limit-rpm: "60000"
    hosts:
      - host: demo.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    requests:
      memory: 100Mi
  gatekeeperResources:
    requests:
      memory: 100Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  updateStrategy: null

backend:
  enabled: true
  replicaCount: 1
  annotations:
    reloader.stakater.com/auto: "true"

  image:
    repository: registry.aggregion.com/dmp-backend
    pullPolicy: IfNotPresent
    tag: "release-22_sep-906b7f90-1302"

  crond:
    image:
      repository: "registry.aggregion.com/cron-curl"
      tag: "0.0.1"
      pullPolicy: IfNotPresent
    resources: {}

  datalabProxy:
    replicaCount: 1
    listenPort: 8080
    image:
      repository: nginx
      tag: 1.23.3-alpine
      pullPolicy: IfNotPresent
    resources:
      requests:
        memory: "50Mi"

  dbseed:
    enabled: false
    podAnnotations: {}
    image:
      repository: registry.aggregion.com/dmp-seed
      tag: latest
      pullPolicy: Always
    useConfig: retailer
    once: 1
    numberOfCustomers: 0
    accountsAndUsers: 0
    resources: {}
  probes:
    common:
      livenessPath: /healthcheck/liveness
      readinessPath: /healthcheck/readiness
      healthcheckPort: 9047
      healthcheckShutdownTimeoutMs: 5000
    api:
      livenessEnabled: false
      readinessEnabled: false
    debugHasherStatusWatcher:
      livenessEnabled: false
      readinessEnabled: false
    cleanroomStatusWatcher:
      livenessEnabled: false
      readinessEnabled: false
    bcDatasetRequestsUpdater:
      livenessEnabled: false
      readinessEnabled: false
    bcScriptsUpdater:
      livenessEnabled: false
      readinessEnabled: false
    bcProjectsUpdater:
      livenessEnabled: false
      readinessEnabled: false
    bcInteractionsUpdater:
      livenessEnabled: false
      readinessEnabled: false
    datasetUploader:
      livenessEnabled: false
      readinessEnabled: false
    jobScheduler:
      livenessEnabled: false
      readinessEnabled: false
    blockchainUpdater:
      livenessEnabled: false
      readinessEnabled: false
  configs:
    # infrastructure dependencies
    mongoUrl: "mongodb://mongo:27017/dmp"
    rabbitmqUrl: "amqp://rabbit"
    redisHost: redis
    redisPort: 6379
    redisPassword: ""
    redisPrefix: "agg:"
    clickhouseHost: "clickhouse"
    clickhousePort: 8123
    clickhouseDb: "dmp"
    clickhouseUser: "default"
    clickhousePassword: ""

    # could be disabled
    cache: "redis"
    cacheTtlMarket: 3600
    cacheTtlMatching: 3600

    # default language
    defaultLanguage: "ru"
    # default language for dictionaries
    defaultDictLanguage: "ru"

    # defines concrete storage class for persistence volume claim
    dataStorageClass: ""
    dataStorageSize: "10G"
    # current debug is only for api service
    debugEnabled: false
    # could be enabled if you need access from standalone enclave instance (outside of cluster)
    accessFromFrontendEnabled: false
    dataserviceViaFrontendEnabled: false
    logLevel: "debug"
    migrationEnabled: true
    # auth service client settings
    authService:
      concurrency: 20
      cache:
        enabled: true
        ttl: 60
    # services to be enabled or not
    serviceMatchingStatusWatcherEnabled: true
    serviceMatchingStatusResponseWatcherEnabled: true
    serviceDatasetUploaderEnabled: true
    serviceBlockchainUpdaterEnabled: true
    serviceSegmentsEnabled: true
    servicePanelSegmentUploaderEnabled: false
    servicePipelineDebugHasherStatusWatcherEnabled: false
    servicePipelineDebugCleanroomStatusWatcherEnabled: true
    serviceJobSchedulerEnabled: false
    serviceBlockchainUpdaterOldStyle: false
    interactionIV: "dc189cc59c532e75e957f5dc64f03b82"
    # control access policy module
    authLocalAccessPolicyEnabled: false
    # Used to communicate between dmp and enclave. Must be equals to the same variable in enclave's config server ${dmp.secret}
    dmpSecret: "secret" # needs changing
    # API auth. Secret for JWT.
    jwtSecret: "c2VjcmV0"
    # should be like as frontend ingress host
    baseUrl: "http://aggregion-cdp.com"
    alarmEmail: "alarm@aggregion-cdp.com"
    supportEmail: "support@aggregion-cdp.com"
    # it's whole encoded as json, see source code of dmp-backend :)
    email:
      enabled: true
      transport: "smtp"
      from: "support@aggregion-cdp.com"
      smtp:
        host: "aggregion-cdp.com"
        port: 1025
        secure: false
        tls:
          rejectUnauthorized: false
        auth:
          user: "username"
          pass: "password"
    providerName: "demo" # Human readable id of provider (available symbols = [a-z])
    providerInstanceId: "orgsv2id" # Some eosid of current instance. Should be equals to self-owned document with the same id in blockchain table "orgsv2"
    accountName: "demo" # Needs only for dbseed service. Shouldn't use for production!
    # URL to blockchain node. testnet or prodnet
    eosNodeUrl: "http://testnet.blockchain.dmp.aggregion.com:9999"
    # usually fixed value and equals aggregiondmp
    eosOrgId: "aggregiondmp"
    # usually for aggregiondmp
    eosWalletPub: "EOS696B5YTMyVmMLnmN7C7oWWZ5SANf3NJ8nGWr1SN3MuEN7qZgM5" # deprecated
    # usually for aggregiondmp
    eosWalletPk: "5KXVjVEen9RbprvmVHaLmTmFtMe87G21JnV6CqSGLuyAAbgQ7uY" # deprecated

    # START Block for current provider
    # this is account in blockchain (should be exists). Usually it equals to ${backend.configs.providerInstanceId}
    eosWalletOwnerOrgId: "orgId"
    # Public key of EOS account (wallet)
    eosWalletOwnerPub: "EOS696B5YTMyVmMLnmN7C7oWWZ5SANf3NJ8nGWr1SN3MuEN7qZgM5" # < fake
    # Private key of EOS account (wallet)
    eosWalletOwnerPk: "5KXVjVEen9RbprvmVHaLmTmFtMe87G21JnV6CqSGLuyAAbgQ7uY" # < fake
    # Private key for decryption messages and any data receives via blockchain
    # Can be generated by commands
    # ```bash
    # openssl genrsa -out private.pem 4096
    # ```
    # private.pem should be saved in safety place
    # (example is a fake key)
    eosDecryptPk: |-
      -----BEGIN PRIVATE KEY-----
      MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgAkIy7noMPV1IY09CPEa9
      fU6aTvCK1+O1L8toHOyFEyihRANCAATMacBoCdh0UHeoPdPQ6CPjOO4bqw8Y/OZC
      mVLgsXfn4qwdAKMLaMkKVsxs/ZaIN3pPmIz+FMeuShp8imoWcoGM
      -----END PRIVATE KEY-----
    # Public key must be registered in blockchain (simply, use agg-dmp-contracts-cli tool)
    #
    # Public key can be generated by command
    # ```bash
    # openssl rsa -in private.pem -outform PEM -pubout -out public.pem
    # ```
    #
    # And can be registered in Blockchain by command (agg-dmp-contracts-cli tool)
    # ```bash
    # node cli.js -n ${backend.configs.eosNodeUrl} -w ./${backend.configs.providerInstanceId}.wallet opub set -f ./public.pem ./public.pem
    # ```
    #
    # END Block for current provider
    eosHealthcheckTimeoutMs: 1000
    eosHealthcheckIntervalMs: 10000

    httpSchema: "http"

    dictMode: "global"
    reportDefaultGoodsDirectory: "aggregion"

    # url to enclave service (could be placed outside cluster)
    # enclaveEndpoint: "http://enclave.from.outside.cluster.com:8321"

    enclaveAuthEnabled: false
    enclaveDmpAuthId: "LOCAL"
    # single value for signing
    enclaveAuthValue: "dmFsdWU="
    # secret for hmac
    enclaveAuthSecret: "c2VjcmV0"

    # features to enable/disable
    features:
      # getting user roles from 'x-auth-roles' header and saving it to account.usersRoles
      getUserRolesFromHeaders: false
      # enable/disable setUserRoles/removeUserRoles graphql actions
      userRolesManagment: true
      # enable/disalbe api to create frontend dumps (need only for dev stands)
      frontendDumps: false
    # settings to show/hide modules in the web interface
    systemSettings:
      audiences:
        enabled: true
      campaigns:
        enabled: true
      coupones:
        enabled: true
      surveys:
        enabled: true
      analytics:
        enabled: true
      marketplace:
        enabled: true
      dataMarts:
        enabled: true
      datalab:
        enabled: true
      glossary:
        enabled: true
      dataCatalogue:
        enabled: true

    # credentials to access deploy controller
    datalabUsername: admin
    # credentials to access deploy controller
    datalabPassword: admin
    # namespace of templates
    datalabTemplates: persist
    # registered platform id
    datalabPlatformId: selectel
    # default pvc size for datalab vm is 50G
    datalabStorageSizeGb: "50"
    # limitations for vm
    datalabCpuLimit: "2"
    datalabMemoryLimitGb: "8"
    # the namespace of dmp where it was deployed
    datalabDmpNamespace: "default"
    # the namespace to deploy datalab vm, it will be dynamic if omitted
    datalabNamespace: ""
    # domain suffix
    datalabOverwriteDomain: "localhost"
    # port
    datalabOverwritePort: ""
    # who can access s3 interface of minio in datalab
    datalabWhiteIps: ""
    # url to deploy controller
    datalabApiUrl: "http://deploy-controller.deploy-controller.svc.cluster.local:5010/api"
    datalabApiVersion: "0.2.0"
    # back reference to dmp api
    datalabAuthUrl: "http://datalab-auth-helper.datalab-auth-helper.svc.cluster.local:19000/"
    datalabWebhookUrl: "http://aggregion-cdp-backend-EDIT_THAT.NAMESPACE.svc.cluster.local:8080/webhooks"
    datalabMaxVms: "10"
    listenPort: 15432
    atlasUrl: "http://atlas.local" # External link for the frontend
    dcUseExternalS3: false
    webhookTokenExpirationTime: 3600
    metadataSeedApiUrl: "http://metadataseed"
    useMatchingRuleService: true
    graphQLPlayground:
      enabled: true
    gitlab:
      personalAccessToken: "xJ51bxxa1ZrQXiMdoYFt"
      host: "https://gitlab.cas-dcap.aggregion.com"
    pipelineStopper:
      queue: "pipeline_stopper"
    pipelineRunner:
      debugMode: false
      queue: "create_pipeline_runner"
      pipelines:
        cleanroom:
          # namespace: "pipelines"
          # pvcSize: "1Gi"
          # storageClassName: "longhorn"
          # serviceAccountName: "pipelines-dev1-runner-sa"
          # timeout: "1h0m0s"
          pipelineName: "debug-cleanroom" # should be replaced to "scone-cleanroom" for production
          statusQueue: "pipeline_cleanroom_event_status"
        debugHasher:
          namespace: "pipelines"
          pvcSize: "10Mi"
          storageClassName: "longhorn"
          serviceAccountName: "pipelines-dev1-runner-sa"
          timeout: "1h0m0s"
          pipelineName: "debug-hasher"
          statusQueue: "pipeline_debug_hasher_event_status"
    metrics:
      isEnabled: false
      path: "/metrics"
    metadataServiceToken: token
    userRolesMap:
      Query:
        Project:
          get: ['DATA_RESEARCHER', 'TEAMLEAD', 'ADMIN']
          list: ['DATA_RESEARCHER', 'TEAMLEAD', 'ADMIN']
          incominglist: ['DATA_ASSET_OWNER', 'DATA_STEWARD', 'DATA_RESEARCHER', 'TEAMLEAD']
          outcominglist: ['DATA_ASSET_OWNER', 'DATA_STEWARD', 'DATA_RESEARCHER', 'TEAMLEAD']
        DataLabVM:
          get: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
          list: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
          getBucketlistObjects: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
          upload: ['DATA_RESEARCHER', 'TEAMLEAD']
        DatasetRequest:
          get: ['TEAMLEAD', 'DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD']
          list: ['TEAMLEAD', 'DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD', 'ADMIN']
          incomingList: ['TEAMLEAD', 'DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD']
          outcomingList: ['TEAMLEAD', 'DATA_RESEARCHER']
        Script:
          get: ['DATA_RESEARCHER', 'DATA_STEWARD', 'DATA_ASSET_OWNER', 'TEAMLEAD']
          list: ['DATA_RESEARCHER', 'DATA_STEWARD', 'DATA_ASSET_OWNER', 'TEAMLEAD']
        Dataset:
          get: ['TEAMLEAD', 'DATA_ANALYST', 'ADMIN', 'DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD', 'GLOSSARY_RESEARCHER']
          list: ['TEAMLEAD', 'DATA_ANALYST', 'ADMIN', 'DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD', 'GLOSSARY_RESEARCHER']
        DatasetLogs:
          list: ['TEAMLEAD']
        MetadataSeed:
          seedExcelData: ['DATA_ANALYST', 'DATA_STEWARD']
        JobSetting:
          get: ['TEAMLEAD', 'DATA_RESEARCHER']
          list: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
        Job:
          list: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
        DatasetMatchingGroup:
          get: ['TEAMLEAD', 'DATA_RESEARCHER']
          list: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
          checkDatasetsForMatching: ['TEAMLEAD', 'DATA_RESEARCHER']
        MetadataField:
          get: ['DATA_ANALYST', 'ADMIN']
          list: ['DATA_ANALYST', 'ADMIN']
        MetadataTable:
          get: ['DATA_ANALYST', 'ADMIN']
          list: ['DATA_ANALYST', 'ADMIN']
        MetadataDatabase:
          get: ['DATA_ANALYST', 'ADMIN']
          list: ['DATA_ANALYST', 'ADMIN']
        MetadataInstance:
          get: ['DATA_ANALYST', 'ADMIN']
          list: ['DATA_ANALYST', 'ADMIN']
        MetadataDataset:
          get: ['DATA_ANALYST', 'ADMIN']
          list: ['DATA_ANALYST', 'ADMIN']
        MetadataTerm:
          get: ['DATA_ANALYST', 'ADMIN']
          list: ['DATA_ANALYST', 'ADMIN']
      Mutation:
        Account:
          updateGlobalOrgInfo: ['ADMIN']
          setUserRoles: ['ADMIN']
          removeUserRoles: ['ADMIN']
          addMarketplaceInteraction: ['ADMIN']
          deleteMarketplaceInteraction: ['ADMIN']
          updateMarketplaceInteractions: ['ADMIN']
          grantAccess: ['ADMIN']
          denyAccess: ['ADMIN']
          setInteractionMatchingRule: ['ADMIN']
        providerConfig:
          setProviderConfig: ['ADMIN']
        Project:
          create: ['TEAMLEAD']
          merge: ['TEAMLEAD']
          removeProject: ['TEAMLEAD']
          changeStatus: ['TEAMLEAD']
          addMember: ['TEAMLEAD', 'ADMIN']
          removeMember: ['TEAMLEAD', 'ADMIN']
        DataLabVM:
          create: ['TEAMLEAD']
          merge: ['TEAMLEAD']
          runDataLabVM: ['DATA_RESEARCHER', 'TEAMLEAD']
          stopDataLabVM: ['TEAMLEAD', 'ADMIN']
        DatasetRequest:
          create: ['TEAMLEAD', 'DATA_RESEARCHER']
          merge: ['TEAMLEAD', 'DATA_RESEARCHER']
          changeStatus:
            - if:
                args:
                  status: "review"
              then: ['TEAMLEAD', 'DATA_RESEARCHER']
            - if:
                args:
                  status: "approved"
              then: ['DATA_STEWARD', 'DATA_ASSET_OWNER']
            - if:
                args:
                  status: "rejected"
              then: ['DATA_STEWARD', 'DATA_ASSET_OWNER']
          createAndMoveToReview: ['TEAMLEAD', 'DATA_RESEARCHER']
          upload: ['TEAMLEAD', 'DATA_RESEARCHER']
        Script:
          create: ['DATA_RESEARCHER', 'TEAMLEAD']
          merge: ['DATA_RESEARCHER', 'TEAMLEAD']
          changeStatus:
            - if:
                args:
                  status: 'ready4review'
              then: ['TEAMLEAD']
            - if:
                args:
                  status: 'approved'
              then: ['DATA_STEWARD', 'DATA_ASSET_OWNER']
            - if:
                args:
                  status: 'rejected'
              then: ['DATA_STEWARD', 'DATA_ASSET_OWNER']
          makeReview: ['DATA_STEWARD', 'DATA_ASSET_OWNER']
        GlossaryTerm:
          bookmark: ['GLOSSARY_RESEARCHER']
          unbookmark: ['GLOSSARY_RESEARCHER']
        DatasetMatchingGroup:
          create: ['TEAMLEAD', 'DATA_RESEARCHER']
          merge: ['TEAMLEAD', 'DATA_RESEARCHER']
          setDatasets: ['TEAMLEAD', 'DATA_RESEARCHER']
          removeDataset: ['TEAMLEAD', 'DATA_RESEARCHER']
          changeStatus: ['TEAMLEAD', 'DATA_RESEARCHER']
          hide: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
          unhide: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
          runMatching: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
          stopMatching: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
          runUpload: ['TEAMLEAD', 'DATA_RESEARCHER']
          stopUpload: ['TEAMLEAD', 'DATA_RESEARCHER']
        MetadataSeed:
          seedExcelData: ['DATA_ANALYST', 'DATA_STEWARD']
        JobSetting:
          create: ['TEAMLEAD', 'DATA_RESEARCHER']
          merge: ['TEAMLEAD', 'DATA_RESEARCHER']
          changeStatus:
            - if:
                args:
                  status: 'waiting'
              then: ['TEAMLEAD']
            - if:
                args:
                  status: 'debug'
              then: ['TEAMLEAD', 'DATA_RESEARCHER']
            - if:
                args:
                  status: 'ready4review'
              then: ['TEAMLEAD', 'DATA_RESEARCHER']
          setSchedule: ['TEAMLEAD']
        Job:
          debug: ['TEAMLEAD', 'DATA_RESEARCHER']
          run: ['TEAMLEAD']
          abort: ['TEAMLEAD', 'DATA_RESEARCHER', 'ADMIN']
        MetadataField:
          merge: ['DATA_ANALYST']
        MetadataTable:
          merge: ['DATA_ANALYST']
        MetadataDatabase:
          merge: ['DATA_ANALYST']
        MetadataInstance:
          merge: ['DATA_ANALYST']
        MetadataDataset:
          create: ['DATA_ANALYST']
          merge: ['DATA_ANALYST']
        MetadataTerm:
          create: ['DATA_ANALYST']
          merge: ['DATA_ANALYST']
  restartPolicy: Always
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    api:
      type: ClusterIP
      port: 8080
    datalabProxy:
      type: ClusterIP
      port: 8080
  pvc:
    accessModes:
      - ReadWriteOnce

  updateStrategy:
    type: Recreate

  resources:
    api:
      requests:
        memory: "500Mi"
    migration:
      requests:
        memory: "100Mi"
    matchingStatusWatcher:
      requests:
        memory: "100Mi"
    matchingStatusResponseWatcher: {}
    atlasEntitySyncer:
      requests:
        memory: "200Mi"
    datasetUploader:
      requests:
        memory: "200Mi"
    blockchainUpdater:
      requests:
        memory: "500Mi"
    segments:
      requests:
        memory: "500Mi"
    bcChecker:
      requests:
        memory: "100Mi"
    bcSyncer: {}
    crond: {}
    panelSegmentUploader:
      requests:
        memory: "500Mi"
    jobScheduler:
      requests:
        memory: "150Mi"
    pipelineDebugHasherStatusWatcher:
      requests:
        memory: "200Mi"
    pipelineDebugCleanroomStatusWatcher:
      requests:
        memory: "200Mi"
    datasetLogsSyncer:
      requests:
        memory: "100Mi"
    datasetSyncer:
      requests:
        memory: "100Mi"
    datasetUpdater:
      requests:
        memory: "100Mi"
    instanceSyncer:
      requests:
        memory: "100Mi"
    dataserviceApi:
      requests:
        memory: "500Mi"
    emailservice:
      requests:
        memory: "100Mi"
    metadataSeedApi:
      requests:
        memory: "100Mi"
    oidcprovider:
      requests:
        memory: "100Mi"
    metadataServiceApi:
      requests:
        memory: "200Mi"
    dbMetadataSyncApi:
      requests:
        memory: "200Mi"
    dbMetadataSyncConsumer:
      requests:
        memory: "100Mi"
    audienceDatasetConsumer:
      requests:
        memory: "100Mi"
  nodeSelector: {}
  tolerations: []
  affinity: {}

enclave:
  # should be false when enclave deployed outside of cluster, as standalone instance
  enabled: true
  replicaCount: 1
  annotations:
    reloader.stakater.com/auto: "true"
  hostname: "enclave"
  sgx:
    nodeWithSgxSelector: {}
    device: "/dev/sgx"
  scone:
    enabled: false
    debug: false
    espApiKey: ""
    espAddr: "http://esp"
    lasImage:
      repository: "registry.aggregion.com/sconecuratedimages/aggregion"
      pullPolicy: "IfNotPresent"
      tag: "las-no-epid-scone-5.6.0"
    lasEnvs: []
    lasPort: 18766
    lasHostPort: 18766
    lasServiceExternalName: "las"
    lasAnnotations: {}
    lasPodAnnotations: {}
    lasRestartPolicy: "Always"
    lasUpdateStrategy: null
    lasPodSecurityContext: {}
    lasSecurityContext: {}
    heapSize: "2G"
  imageServer:
    repository: registry.aggregion.com/enclave-server-nodejs
    pullPolicy: IfNotPresent
    tag: "main"
  imageServices:
    repository: registry.aggregion.com/enclave-external-services
    pullPolicy: IfNotPresent
    tag: "develop"
  probes:
    livenessPath: /healthcheck/liveness
    readinessPath: /healthcheck/readiness
    readiness:
      enabled: false
      timeoutSeconds: 30
      initialDelaySeconds: 10
      periodSeconds: 40
      successThreshold: 1
      failureThreshold: 20
    liveness:
      enabled: false
      timeoutSeconds: 30
      initialDelaySeconds: 10
      periodSeconds: 40
      successThreshold: 1
      failureThreshold: 20
    livenessInitialDelaySeconds: 60 # DEPRECATED (see .enclave.probes.liveness.initialDelaySeconds)
    readinessInitialDelaySeconds: 60 # DEPRECATED (see .enclave.probes.readiness.initialDelaySeconds)
    livenessEnabled: false # DEPRECATED (see .enclave.probes.liveness.enabled)
    readinessEnabled: false # DEPRECATED (see .enclave.probes.readiness.enabled)
  configs:
    # the key (pair with public key) is used to authenticate another enclaves
    dataserviceToken: "dataserviceToken"
    authPrivateKey: "PrivateKeyBody"
    listenPort: 8321
    listenInnerPort: 8010
    datalabToken: "" # DEPRECATED (using nowhere)
    prettyLogs: "" # DEPRECATED (see .enclave.configs.enablePrettyLogs)
    enablePrettyLogs: false
    workerHeapSizeMb: 5000
    sharedSecret: "shared-secret"
    providerSecret: "provider-secret"
    dmpBaseURL: ""
    dataserviceBaseURL: ""
    gfr:
      ignoreStrings: []
      estimatedMemoryUsage: 2147483648
    nodeTlsRejectUnauthorized: true
    rabbitmqPrefetch: 1
    tmpHostPath: /tmp/enclave
    tasksResultTtl: 7200 # in seconds
  restartPolicy: Always
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8010"
  updateStrategy:
    type: Recreate
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 8321
    innerPort: 8010

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 128000m
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: enclave.local
        paths:
          - "/"
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - enclave.local
  resources:
    server: {}
      # if use azure (AKS)
      # limits:
      #   kubernetes.azure.com/sgx_epc_mem_in_MiB: 16

    services: {}
    las: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

      # if use azure (AKS)
      # limits:
      #   kubernetes.azure.com/sgx_epc_mem_in_MiB: 16
  nodeSelector: {}
  tolerations: []
  affinity: {}

dataservice:
  enabled: true
  replicaCount: 1
  nameOverride: ""
  annotations:
    reloader.stakater.com/auto: "true"
  podAnnotations: {}
  restartPolicy: Always
  updateStrategy: null
  securityContext: {}
  imageApi:
    repository: registry.aggregion.com/dataservice
    pullPolicy: IfNotPresent
    tag: master-989043e9-31
  imageAtlasEntitySyncer:
    repository: registry.aggregion.com/atlas-entity-syncer
    pullPolicy: IfNotPresent
    tag: master-4aadef97-71
  imageJobRunner:
    repository: curlimages/curl
    pullPolicy: IfNotPresent
    tag: "7.87.0"
  tolerations: []
  affinity: {}
  probes:
    common:
      livenessPath: /healthcheck/liveness
      readinessPath: /healthcheck/readiness
      healthcheckPort: 9047
      healthcheckShutdownTimeoutMs: 5000
    datasetLogs:
      livenessEnabled: false
      readinessEnabled: false
    datasetSyncer:
      livenessEnabled: false
      readinessEnabled: false
    datasetUpdater:
      livenessEnabled: false
      readinessEnabled: false
    glossary:
      livenessEnabled: false
      readinessEnabled: false
    instanceSyncer:
      livenessEnabled: false
      readinessEnabled: false
    api:
      livenessEnabled: false
      readinessEnabled: false
    atlasEntitySyncer:
      livenessEnabled: false
      readinessEnabled: false
  service:
    type: ClusterIP
    port: 80 # external
  serviceAtlasSyncer:
    type: ClusterIP
    port: 8090 # external
  configAtlasSyncer:
    enabled: false
    port: 8090 # internal
    cronjob:
      schedule: "*/15 * * * *"
  glossarySyncers:
    enabled: false
  datasetLogsSyncers:
    enabled: true
  datasetDatasetSyncer:
    enabled: true
  datasetDatasetUpdater:
    enabled: true
  datasetInstanceSyncer:
    enabled: true
  config:
    # accessToken: dataservice-api$ node src/cli token gen -i ${backend.configs.providerName}
    accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiRGF0YSBBY2Nlc3MgVG9rZW4gZm9yIHRoZSBhdXRob3JpemF0aW9uIGluIHRoZSBsb2NhbCBwcm92aWRlciBlbnZpcm9ubWVudCIsImlhdCI6MTYzMjY2MDY1OCwiaXNzIjoic3RhZ2VfcHJvdmlkZXIifQ.DLh9HQHXXTZuGSRrXf9uk6QBiikOHztcZ2aNC7x6wKg" # < fake
    appName: dataservice-api
    logLevel: info
    logPrettyPrint: false
    nodeEnv: development
    port: 9045 # internal
    mongoDbUri: mongodb://127.0.0.1:27017/ds-api
    mongoDbUriTest: mongodb://agg-dev:18005/ds-api-tests
    mongoDebug: false
    tokenExpirationTimeInSec: 31104000
    tokenSecretKey: data_access_token_secret_key
    tokenIssuer: local_provider_name
    bcmqPollingInterval: 200
    bcmqLimit: 1
    trinoHost: localhost
    trinoPort: 8080
    rabbitmqUri: "amqp://127.0.0.1"
    endpoint: "http://aggregion-cdp-dataservice-EDIT_THAT.NAMESPACE.svc.cluster.local:9045/api"
    clickhouseUseDirectConnection: true # since 2021-12-13
    clickhouseIsMocked: false # since 2021-12-13
    eosHealthcheckTimeoutMs: 1000
    eosHealthcheckIntervalMs: 10000
    # metadataServiceEndpoint: "http://aggregion-cdp-dataservice-mds/healthcheck" # DEPRECATED
    metadataServiceToken: "metadata-service-token-as-db-metadata-sync"
    credentialsDecryptKey: "rsa-public-key"
    datasetLogsAvailableDays: 120
    atlasEntitySyncer:
      nodeTlsRejectUnauthorized: true
  glossaryContainers:
    glossarySyncer:
      enabled: true
      healthcheckPort: 9048
      healthcheckPortName: gls-sync
      resources:
        requests:
          memory: 100Mi
    glossaryUpdater:
      enabled: true
      healthcheckPort: 9049
      healthcheckPortName: gls-upd
      resources:
        requests:
          memory: 100Mi
    glossaryTermSyncer:
      enabled: true
      healthcheckPort: 9050
      healthcheckPortName: gls-term-sync
      resources:
        requests:
          memory: 100Mi
    glossaryTermUpdater:
      enabled: true
      healthcheckPort: 9051
      healthcheckPortName: gls-term-upd
      resources:
        requests:
          memory: 100Mi

metadataSeed:
  enabled: false
  replicaCount: 1
  podAnnotations: {}
  restartPolicy: Always
  service:
    type: ClusterIP
    port: 80
  cronjob:
    schedule: "0 * * * *"
  image:
    repository: registry.aggregion.com/metadata-seed
    tag: dcp-master-b93bfd22-33
    pullPolicy: IfNotPresent
  probes:
    common:
      livenessPath: /healthcheck/liveness
      readinessPath: /healthcheck/readiness
      healthcheckPort: 9047
      healthcheckShutdownTimeoutMs: 5000
    metadataSeed:
      livenessEnabled: false
      readinessEnabled: false
  config:
    port: 8100
    logLevel: info
    logPrettyPrint: false
    dmpBackendBaseUrl: "http://dmpbackend"
    nodeTlsRejectUnauthorized: true

authservice:
  # must be always `true` for production
  enabled: false
  # number of replicated pods
  replicaCount: 1
  # name to override default pod name
  nameOverride: ""
  # authservice deployment annotations
  annotations:
    reloader.stakater.com/auto: "true"
  # authservice pod annotations
  podAnnotations: {}
  # restart policy
  restartPolicy: Always
  # update strategy
  updateStrategy: null
  # authservice security context
  securityContext: {}
  image:
    # authservice image repository
    repository: registry.aggregion.com/auth-service
    # authservice image pull policy
    pullPolicy: IfNotPresent
    # authservice image tag
    tag: dcp-master-4bb66bb3-51
  # tolerations for pod assignment
  tolerations: []
  # affinity for pod assignment
  affinity: {}
  # service configuration
  service:
    # Kubernetes service type
    type: ClusterIP
    # service HTTP port
    port: 80 # external
  # cofiguration of liveness, readiness probes
  probes:
    livenessPath: /healthcheck/liveness
    readinessPath: /healthcheck/readiness
    healthcheckPort: 9047
    healthcheckShutdownTimeoutMs: 5000
    livenessEnabled: false
    readinessEnabled: false
  config:
    # internal app name
    appName: authservice-api
    # log level
    logLevel: info
    # set `true` to enable human-readable logging format
    logPrettyPrint: false
    # NODE_ENV env variable value
    nodeEnv: development
    # port
    port: 9045 # internal
    # mongo db connection string URI
    mongoDbUri: mongodb://127.0.0.1:27017/auth-service
    # enables mongodb debug logs
    mongoDebug: false
    # invitation token expiration time
    jwtInviteExpirationTimeInSeconds: 31104000
    # jwt token secret key
    jwtSecretKey: authservice_secret_key
    # value of 'canConfigure' field of invitation token payload
    localAccessPolicyCanConfigure: owner
    # adds 'canConfigure' field to invitation token payload if enabled
    localAccessPolicyEnabled: false

oidcprovider:
  # enable if you want to use Aggregion OIDC Provider
  enabled: false
  # number of replicated pods
  replicaCount: 1
  # name to override default pod name
  nameOverride: ""
  # oidcprovider deployment annotations
  annotations:
    reloader.stakater.com/auto: "true"
  # oidcprovider pod annotations
  podAnnotations: {}
  # restart policy
  restartPolicy: Always
  # update strategy
  updateStrategy: null
  # oidcprovider security context
  securityContext: {}
  image:
    # oidcprovider image repository
    repository: registry.aggregion.com/oidc-provider
    # oidcprovider image pull policy
    pullPolicy: IfNotPresent
    # oidcprovider image tag
    tag: dcp-master-4c911744-86
  # tolerations for pod assignment
  tolerations: []
  # affinity for pod assignment
  affinity: {}
  # service configuration
  service:
    # Kubernetes service type
    type: ClusterIP
    # service HTTP port
    port: 80
  # ingress parameters
  ingress:
    # enable ingress record generation
    enabled: false
    # ingress annotations
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 128000m
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/limit-rps: "1000"
      nginx.ingress.kubernetes.io/limit-rpm: "60000"
    # hosts for ingress rules
    hosts:
      - host: auth.local
    # ingress tls
    tls: []
  # cofiguration of liveness, readiness probes
  probes:
    livenessPath: /healthcheck/liveness
    readinessPath: /healthcheck/readiness
    healthcheckPort: 9047
    healthcheckShutdownTimeoutMs: 5000
    livenessEnabled: false
    readinessEnabled: false
  config:
    # port
    port: 9055
    # client id of an external client
    clientId: keycloak
    # client secret of an external client
    clientSecret: secret
    # supported client scopes
    clientScopes: "openid profile"
    # supported client redirect uris of an external client
    clientRedirectUris:
      - "http://localhost:8080/auth/realms/master/broker/oidc/endpoint"
    # supported client post logout redirect uris of an external client
    clientPostLogoutRedirectUris:
      - "http://localhost:8080/auth/realms/master/broker/oidc/endpoint/logout_response"
    # key list for keygrip (https://github.com/crypto-utils/keygrip)
    cookiesKeys:
      - 16a6d259dbf8887e76e0702f8af2059dd3092138340b63dbe67db5c866d530ad
      - 9be003e7425596421b5d4aa07621c93de3a5f3b4e984ae0ec8e4c1ae939555be
    # oidc features
    features:
      # enable RP-Initiated Logout features (https://openid.net/specs/openid-connect-rpinitiated-1_0-final.html)
      rpInitiatedLogout: true
    # log level
    logLevel: info
    # set `true` to enable human-readable logging format
    logPrettyPrint: false
    # uri to which the user should be redirected after successful registration
    successSignupRedirectUri: http://localhost:9055/signup
    # enable i18next lib logs
    i18nextDebug: false
    # NODE_ENV env variable value
    nodeEnv: production
    # ttl settings
    ttl:
      # access token ttl
      accessToken: 3600
      # id token ttl
      idToken: 3600
      # interaction ttl
      interaction: 172800
      # refresh token ttl
      refreshToken: 1209600
  # JSON Web Key Set used by the provider for signing and decryption (https://github.com/panva/node-oidc-provider/tree/main/docs#jwks)
  jwks: |
    {
      "keys": [
        {
          "e": "AQAB",
          "n": "vw6qrT-aX_WB0hzkkfrqSPQ-C3gJBpGbj1Y7S0pJznbx54mDMrVNPQPng_sV5_ACDl9WfzvcHFsYmxrK7Rt1BaV1Gu6QqlxSSee9S5SouWXyelzGV-UdVX2yu0ftr5MrFWFjOLtn9ptbv9r2Lisl5V5br1HF04J1lgGTn5VFEY4VlJb26X5voPO-SwHQoufveeAhE2U-ZsHwdAdScptcLvMe8DCLPJyI3jQYYTfcdxcFQMJ_m-haYVd6KTx5w1jlwO4QDfuZliTgt_p1kUrdhZ1hQ8Y5F9i4edOTcUB_GiYNO7T9xTUQvJFFF52jBXY6TetABVeJoW3M2JFyg0x8Qw",
          "d": "h7qFqfqLUyx4g6oe_03_7sAE6-TklJQQrS2Xhg9Ki7CYfeKFIBsIuhXx_SL9Fv68lzVHn7AI2OQmgNnx26wr4E0A-pcMktpvYy2MnwsHKl6wehk6luqfgkKAHOgmhRrJ-rBq6rzISLtp3MxTI81naKE2BUDUh0QhAOYx16cVoDfRPQ-pcBFHKpxfwRM6lIVFfBhisARNG5eMUDshU9L3DsQH43Ggc5jz3SwdwprJpACrs022RhzW73AgQFg5CmWruEzqkShENlOQP4VIy9O24ahxhPM_h8prtPsKIQjym8pZAhYvwMdZpMJW8YIOKm8XswSUZMTDKeCeHQAXuUAsoQ",
          "p": "_KKZ8uI3d2_DrPfBB4y15xiH9qOTwOS4m262KeKtCXif1UTAcVwwxneHIUZgJF_2vchV3dO2R5mUr6QuOWNw7DrYcpw0MA-AcDLcRtxcMYC0VxQFwr5fgdTrlQUv48nfSmyVGjHJM4WkMxhnHE6BY11jnQZPPyPxVNGOGVrgE9s",
          "q": "wZobJ-b5mTu8h-Mk1TqTDz7yRiAHhgUu-bl-2oLSJNKz5KSOcUY8GedfwsyKbjraj0Ja6wXy5o9JCJs-vaNyL094O052f95gv-bRcYH1T212fPoX0fL4az8MLdGmShA8Q_Hj__92DllFF5szUR-Y51XmIzE3bLWdxJdCk8aVWbk",
          "dp": "pnq0PlUKPh-db7cYMdRs7mvA9SvYKw3OBUdQrYtdgddGZHDY7BrXXYHYv3mz02SVoXyJ8RMZlFdFnvTvLQw1lsY0alo7HcypU8aAWAXQjyKENLnSDgILx--6isoPQ-l8xnuFSeyy7MvNZ4pWMFYfd45MHWbSBAa4eq9ZF6ZF8W8",
          "dq": "JQ5aJEkRfULx0xCm_Ck5_LEPrlxzFDPpyeK3ZRulHWc3B4x3tza6Sjr_GUoNNQwOyVzqChIZbAgA8qTEXYfrUyLi4HckN1VZL2H-tLsrOQi6pTE5XfYjlmN68Uovif2Ri2_BND6xWg28K8iJCf4CRkUqx5GkCiq5B-fr1l0sOQ",
          "qi": "uzQZM2x2Pz5mEkWAkQbnKCXjEb-93bHnpcghuRe47foeSJ3KEcd7oisqofOpJsGFi7Vcd-ea5TZY_iGwm6nJFl_vh3yvZJ4oQJGvxNsk9rzunG-AIpCjk_v2MabwNIaeWoaWxn6Yx7Tq7HgDjKEbJyKg1Vj1yMzqHM_BLyvMo5Y",
          "kty": "RSA",
          "kid": "KYjPVqZoPdwWEDrHFCuGd6bJVcI_pLLuSTyUoCcr8Qk",
          "use": "sig"
        },
        {
          "crv": "P-256",
          "x": "02k-sv38EpqMFWL341El0MTprqTwTYDhM6T1OnWqXD4",
          "y": "VBpjfAJyFAQZpIVFxvgIWy6Qxe3EVhiml0bwhCJE9Go",
          "d": "NHPW36e0GCxfPFfCi3POln6Js3oeCUWY6v9dHuSoizs",
          "kty": "EC",
          "kid": "K4zIY2QJmXJsXBsIjUy_q-rpn7uaKkuFBHw_LInAw2o",
          "alg": "ES256",
          "use": "sig"
        },
        {
          "crv": "Ed25519",
          "x": "qrP9L_uydoCd3tJ3aGTKq6c86c0SYeQRVBT0jlHXpKw",
          "d": "bEUmioKn7zFczd9MiQ35E1gDXIHtsMFNptEF6uCTUJs",
          "kty": "OKP",
          "kid": "71JJSTk5kk5i75rMo1V6wEUWWj6qGdEl87-M7Bb06xA",
          "alg": "EdDSA",
          "use": "sig"
        }
      ]
    }

emailservice:
  # must be 'true' when oidcprovider enabled
  enabled: false
  # number of replicated pods
  replicaCount: 1
  # name to override default pod name
  nameOverride: ""
  # emailservice deployment annotations
  annotations:
    reloader.stakater.com/auto: "true"
  image:
    # emailservice image repository
    repository: registry.aggregion.com/email-service
    # emailservice image pull policy
    pullPolicy: IfNotPresent
    # emailservice image tag
    tag: dcp-master-c9cb34e5-29
  # emailservice pod annotations
  podAnnotations: {}
  # restart policy
  restartPolicy: Always
  # update strategy
  updateStrategy: null
  # emailservice security context
  securityContext: {}
  # tolerations for pod assignment
  tolerations: []
  # affinity for pod assignment
  affinity: {}
  # cofiguration of liveness, readiness probes
  probes:
    livenessPath: /healthcheck/liveness
    readinessPath: /healthcheck/readiness
    healthcheckPort: 9047
    healthcheckShutdownTimeoutMs: 5000
    livenessEnabled: false
    readinessEnabled: false
  config:
    # RabbitMQ queue name to consume email tasks
    queueName: emails
    # log level
    logLevel: info
    # set `true` to enable human-readable logging format
    logPrettyPrint: false

cleos:
  enabled: false
  replicaCount: 1
  nameOverride: ""
  annotations: {}
  image:
    repository: registry.aggregion.com/cleos
    pullPolicy: Always
    tag: latest
  updateStrategy: null
  podAnnotations: {}
  restartPolicy: Always
  securityContext: {}
  tolerations: []
  affinity: {}

metadataService:
  enabled: false
  migrationEnabled: false
  replicaCount: 1
  podAnnotations: {}
  restartPolicy: Always
  image:
    repository: registry.aggregion.com/metadata-service
    pullPolicy: IfNotPresent
    tag: 5f655259
  service:
    containerPort: 8080
    port: 80
    type: ClusterIP
  probes:
    livenessEnabled: false
    readinessEnabled: false
  cronjob:
    enabled: false
    schedule: "*/5 * * * *"
  config:
    appName: metadata-service-api
    logLevel: info
    nodeEnv: development
    dmpBackendBaseUrl: "http://dmpbackend"
    jwtSecret: secret
    postgres:
      db: metadata
      host: localhost
      port: 5432
      password: postgres
      user: postgres
      logging: false
    amqp:
      url: amqp://admin:12345678@localhost
      prefetchCount: 1
      queues:
        dataset: datasets
        instance: instances
        term: glossary_terms
    metrics:
      enabled: false

dbMetadataSync:
  enabled: false
  replicaCount: 1
  podAnnotations: {}
  restartPolicy: Always
  image:
    repository: registry.aggregion.com/db-metadata-sync
    pullPolicy: IfNotPresent
    tag: eacd9a51
  service:
    containerPort: 8080
    port: 80
    type: ClusterIP
  probes:
    livenessEnabled: false
    readinessEnabled: false
  cronjob:
    enabled: false
    schedule: "0 * * * *"
  config:
    appName: db-metadata-sync
    nodeEnv: development
    logLevel: info
    metadataServiceToken: token
    instances:
      - name: instance
        rdbmsType: clickhouse
        connectionOptions:
          hostname: 10.0.2.50
          port: 18001
        databases:
          - name: some-database
            tables:
              - table1
              - table2
            credentials:
              username: root
              password: admin
    metrics:
      enabled: false

dbMetadataSyncConsumer:
  enabled: false
  replicaCount: 1
  podAnnotations: {}
  restartPolicy: Always
  image:
    repository: registry.aggregion.com/db-metadata-sync-consumer
    pullPolicy: IfNotPresent
    tag: b582590f
  probes:
    livenessEnabled: false
    readinessEnabled: false
  config:
    appName: db-metadata-sync-consumer
    logLevel: info
    metrics:
      enabled: false
    consumer:
      prefetchCount: 1
      queueName: "tables-for-sync"

audienceDatasetConsumer:
  enabled: false
  replicaCount: 1
  podAnnotations: {}
  restartPolicy: Always
  image:
    repository: registry.aggregion.com/audience-dataset-consumer
    pullPolicy: IfNotPresent
    tag: b582590f
  probes:
    livenessEnabled: false
    readinessEnabled: false
  config:
    appName: audience-dataset-consumer
    logLevel: info
    metrics:
      enabled: false
    consumer:
      prefetchCount: 1
      queueName: "tables-for-audience-dataset"
