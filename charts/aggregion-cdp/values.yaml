# Default values for aggregion-cdp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets:
  - name: aggregionregistry

# all available providers
providers: ["demo"]
providerLinks:
    # this config url is used for accessing to another enclaves
  - name: demo
    url: http://demo

nameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: "default"

frontend:
  replicaCount: 1
  annotations:
    reloader.stakater.com/auto: "true"
  image:
    repository: registry.aggregion.com/dmp-frontend
    pullPolicy: IfNotPresent
    tag: "develop"
  restartPolicy: Always
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  configs:
    listenPort: 5000
    currency: RUB
  service:
    type: ClusterIP
    port: 5000
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 128000m
      nginx.ingress.kubernetes.io/limit-rps: "1000"
      nginx.ingress.kubernetes.io/limit-rpm: "60000"
    hosts:
      - host: demo.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

backend:
  replicaCount: 1
  annotations:
    reloader.stakater.com/auto: "true"

  image:
    repository: registry.aggregion.com/dmp-backend
    pullPolicy: IfNotPresent
    tag: "develop"

  crond:
    image:
      repository: "registry.aggregion.com/cron-curl"
      tag: "0.0.1"
      pullPolicy: IfNotPresent
    resources: {}

  datalabProxy:
    replicaCount: 1
    listenPort: 8080
    image:
      repository: nginx
      tag: 1.19-alpine
      pullPolicy: IfNotPresent
    resources: {}

  dbseed:
    enabled: false
    podAnnotations: {}
    image:
      repository: registry.aggregion.com/dmp-seed
      tag: latest
      pullPolicy: IfNotPresent
    useConfig: retailer
    once: 1
    numberOfCustomers: 0
    accountsAndUsers: 0
    resources: {}

  configs:
    # infrastructure dependencies
    mongoUrl: "mongodb://mongo:27017/dmp"
    rabbitmqUrl: "amqp://rabbit"
    redisHost: redis
    redisPort: 6379
    redisPassword: ""
    redisPrefix: "agg:"
    clickhouseHost: "clickhouse"
    clickhousePort: 8123
    clickhouseDb: "dmp"
    clickhouseUser: "default"
    clickhousePassword: ""

    # could be disabled
    cache: "redis"

    # defines concrete storage class for persistence volume claim
    dataStorageClass: ""
    dataStorageSize: "10G"
    # current debug is only for api service
    debugEnabled: false
    # could be enabled if you need access from standalone enclave instance (outside of cluster)
    accessFromFrontendEnabled: false
    dataserviceViaFrontendEnabled: false
    logLevel: "debug"
    migrationEnabled: true
    # services to be enabled or not
    serviceMatchingStatusWatcherEnabled: true
    serviceMatchingStatusResponseWatcherEnabled: true
    serviceDatasetUploaderEnabled: true
    serviceBlockchainUpdaterEnabled: true
    serviceSegmentsEnabled: true
    serviceBcCheckerEnabled: true
    serviceBcSyncerEnabled: true
    serviceCrondEnabled: true
    servicePanelSegmentUploaderEnabled: false
    # control access policy module
    authLocalAccessPolicyEnabled: false
    # Used to communicate between dmp and enclave. Must be equals to the same variable in enclave's config server ${dmp.secret}
    dmpSecret: "secret" # needs changing
    # API auth. Secret for JWT.
    jwtSecret: "c2VjcmV0"
    # should be like as frontend ingress host
    baseUrl: "http://aggregion-cdp.com"
    alarmEmail: "alarm@aggregion-cdp.com"
    supportEmail: "support@aggregion-cdp.com"
    # it's whole encoded as json, see source code of dmp-backend :)
    email:
      enabled: true
      transport: "smtp"
      from: "support@aggregion-cdp.com"
      smtp:
        host: "aggregion-cdp.com"
        port: 1025
        secure: false
        tls:
          rejectUnauthorized: false
        auth:
          user: "username"
          pass: "password"
    providerName: "demo" # Human readable id of provider (available symbols = [a-z])
    providerInstanceId: "orgsv2id" # Some eosid of current instance. Should be equals to self-owned document with the same id in blockchain table "orgsv2"
    accountName: "demo" # Needs only for dbseed service. Shouldn't use for production!
    # URL to blockchain node. testnet or prodnet
    eosNodeUrl: "http://testnet.blockchain.dmp.aggregion.com:9999"
    # usually fixed value and equals aggregiondmp
    eosOrgId: "aggregiondmp"
    # usually for aggregiondmp
    eosWalletPub: "EOS696B5YTMyVmMLnmN7C7oWWZ5SANf3NJ8nGWr1SN3MuEN7qZgM5" # deprecated
    # usually for aggregiondmp
    eosWalletPk: "5KXVjVEen9RbprvmVHaLmTmFtMe87G21JnV6CqSGLuyAAbgQ7uY" # deprecated

    # START Block for current provider
    # this is account in blockchain (should be exists). Usually it equals to ${backend.configs.providerInstanceId}
    eosWalletOwnerOrgId: "orgId"
    # Public key of EOS account (wallet)
    eosWalletOwnerPub: "EOS696B5YTMyVmMLnmN7C7oWWZ5SANf3NJ8nGWr1SN3MuEN7qZgM5" # < fake
    # Private key of EOS account (wallet)
    eosWalletOwnerPk: "5KXVjVEen9RbprvmVHaLmTmFtMe87G21JnV6CqSGLuyAAbgQ7uY" # < fake
    # Private key for decryption messages and any data receives via blockchain
    # Can be generated by commands
    # ```bash
    # openssl genrsa -out private.pem 4096
    # ```
    # private.pem should be saved in safety place
    # (example is a fake key)
    eosDecryptPk: |-
      -----BEGIN PRIVATE KEY-----
      MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgAkIy7noMPV1IY09CPEa9
      fU6aTvCK1+O1L8toHOyFEyihRANCAATMacBoCdh0UHeoPdPQ6CPjOO4bqw8Y/OZC
      mVLgsXfn4qwdAKMLaMkKVsxs/ZaIN3pPmIz+FMeuShp8imoWcoGM
      -----END PRIVATE KEY-----
    # Public key must be registered in blockchain (simply, use agg-dmp-contracts-cli tool)
    #
    # Public key can be generated by command
    # ```bash
    # openssl rsa -in private.pem -outform PEM -pubout -out public.pem
    # ```
    #
    # And can be registered in Blockchain by command (agg-dmp-contracts-cli tool)
    # ```bash
    # node cli.js -n ${backend.configs.eosNodeUrl} -w ./${backend.configs.providerInstanceId}.wallet opub set -f ./public.pem ./public.pem
    # ```
    #
    # END Block for current provider

    httpSchema: "http"

    dictMode: "global"
    reportDefaultGoodsDirectory: "aggregion"

    # url to enclave service (could be placed outside cluster)
    # enclaveEndpoint: "http://enclave.from.outside.cluster.com:8321/v1"

    enclaveAuthEnabled: false
    enclaveDmpAuthId: "LOCAL"
    # single value for signing
    enclaveAuthValue: "dmFsdWU="
    # secret for hmac
    enclaveAuthSecret: "c2VjcmV0"

    # credentials to access deploy controller
    datalabUsername: admin
    # credentials to access deploy controller
    datalabPassword: admin
    # namespace of templates
    datalabTemplates: persist
    # registered platform id
    datalabPlatformId: selectel
    # default pvc size for datalab vm is 50G
    datalabStorageSizeGb: "50"
    # limitations for vm
    datalabCpuLimit: "2"
    datalabMemoryLimitGb: "8"
    # the namespace of dmp where it was deployed
    datalabDmpNamespace: "default"
    # the namespace to deploy datalab vm, it will be dynamic if omitted
    datalabNamespace: ""
    # domain suffix
    datalabOverwriteDomain: "localhost"
    # port
    datalabOverwritePort: ""
    # who can access s3 interface of minio in datalab
    datalabWhiteIps: ""
    # url to deploy controller
    datalabApiUrl: "http://deploy-controller.deploy-controller.svc.cluster.local:5010/api"
    datalabApiVersion: "0.2.0"
    # back reference to dmp api
    datalabAuthUrl: "http://datalab-auth-helper.datalab-auth-helper.svc.cluster.local:19000/"
    datalabWebhookUrl: "http://aggregion-cdp-backend-EDIT_THAT.NAMESPACE.svc.cluster.local:8080/webhooks"
    listenPort: 15432
    atlasUrl: "http://atlas.local" # External link for the frontend
    dcUseExternalS3: false
    webhookTokenExpirationTime: 3600
    metadataSeedApiUrl: "http://metadataseed"
    userRolesMap:
      Query:
        Project:
          get: ['DATA_ASSET_OWNER', 'DATA_STEWARD', 'DATA_RESEARCHER', 'TEAMLEAD', 'ADMIN']
          list: ['DATA_ASSET_OWNER', 'DATA_STEWARD', 'DATA_RESEARCHER', 'TEAMLEAD', 'ADMIN']
          incominglist: ['DATA_ASSET_OWNER', 'DATA_STEWARD', 'DATA_RESEARCHER', 'TEAMLEAD', 'ADMIN']
          outcominglist: ['DATA_ASSET_OWNER', 'DATA_STEWARD', 'DATA_RESEARCHER', 'TEAMLEAD', 'ADMIN']
        DataLabVM:
          get: ['DATA_RESEARCHER']
          list: ['DATA_RESEARCHER']
          getBucketlistObjects: ['DATA_RESEARCHER']
        DatasetRequest:
          get: ['DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD']
          list: ['DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD']
          incomingList: ['DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD']
          outcomingList: ['DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD']
        DataLabScript:
          get: ['GOD']
          list: ['GOD']
        Dataset:
          get: [ 'DATA_ANALYST', 'ADMIN', 'DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD', 'GLOSSARY_RESEARCHER' ]
          list: [ 'DATA_ANALYST', 'ADMIN', 'DATA_RESEARCHER', 'DATA_ASSET_OWNER', 'DATA_STEWARD', 'GLOSSARY_RESEARCHER' ]
      Mutation:
        Account:
          updateGlobalOrgInfo: ['ADMIN']
          setUserRoles: ['ADMIN']
          removeUserRoles: ['ADMIN']
          addMarketplaceInteraction: ['ADMIN']
          deleteMarketplaceInteraction: ['ADMIN']
          updateMarketplaceInteractions: ['ADMIN']
          grantAccess: ['ADMIN']
          denyAccess: ['ADMIN']
        providerConfig:
          setProviderConfig: ['ADMIN']
        Project:
          create: ['TEAMLEAD']
          merge: ['TEAMLEAD']
          removeProject: ['TEAMLEAD']
          changeStatus: ['TEAMLEAD']
          addMember: ['TEAMLEAD', 'ADMIN']
          removeMember: ['TEAMLEAD', 'ADMIN']
        DataLabVM:
          create: ['TEAMLEAD']
          merge: ['TEAMLEAD']
          runDataLabVM: ['TEAMLEAD', 'ADMIN']
          stopDataLabVM: ['TEAMLEAD', 'ADMIN']
        DatasetRequest:
          create: ['DATA_RESEARCHER']
          merge: ['DATA_RESEARCHER']
          changeStatus:
            - if:
                args:
                  status: 'review'
              then: ['DATA_RESEARCHER']
            - if:
                args:
                  status: 'approved'
              then: ['DATA_STEWARD', 'DATA_ASSET_OWNER']
            - if:
                args:
                  status: 'rejected'
              then: ['DATA_STEWARD', 'DATA_ASSET_OWNER']
          createAndMoveToReview: ['DATA_RESEARCHER']
          upload: ['DATA_RESEARCHER']
        DataLabScript:
          create: ['GOD']
          merge: ['GOD']
          changeStatus: ['GOD']
          makeReview: ['GOD']
        GlossaryTerm:
          bookmark: ['GLOSSARY_RESEARCHER']
          unbookmark: ['GLOSSARY_RESEARCHER']

  restartPolicy: Always
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    api:
      type: ClusterIP
      port: 8080
    datalabProxy:
      type: ClusterIP
      port: 8080

  pvc:
    accessModes:
      - ReadWriteOnce

  updateStrategy:
    type: Recreate

  resources:
    api: {}
    migration: {}
    matchingStatusWatcher: {}
    matchingStatusResponseWatcher: {}
    datasetUploader: {}
    blockchainUpdater: {}
    segments: {}
    bcChecker: {}
    bcSyncer: {}
    crond: {}
    panelSegmentUploader: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

enclave:
  # should be false when enclave deployed outside of cluster, as standalone instance
  enabled: true
  replicaCount: 1
  annotations:
    reloader.stakater.com/auto: "true"

  hostname: "enclave"
  sgx:
    nodeWithSgxSelector: {}
    device: "/dev/sgx"
  scone:
    enabled: false
    debug: false
    espApiKey: ""
    espAddr: "http://esp"
    lasImage:
      repository: "registry.aggregion.com/sconecuratedimages/aggregion"
      pullPolicy: "IfNotPresent"
      tag: "las-scone4.2.1"
    lasEnvs: []
    lasPort: 18766
    lasServiceExternalName: "las"
    lasAddr: "las:18766"
    lasAnnotations: {}
    lasPodAnnotations: {}
    lasRestartPolicy: "Always"
    lasUpdateStrategy: null
    lasPodSecurityContext: {}
    lasSecurityContext: {}
  scripts:
    auditory: "sha256-1dbdf66d12ed88c56682a533bf8b703211a004743e7b6c9393bc70461175f7ba"
    datalab: "sha256-4be860062a8440188600ee3c57d65c59aa3a7d23feee022ab87c4b85386cfe89"
    segment: "sha256-eee58a0d585b02731979815f5985e9d08b8aa328b41c5b5954f67dde1344eed3"
    segmentCriteries: "sha256-af951a1b4078a926671d7fbcb244f0a4f6d6cb221d321cdb5ba569bb84a55f46"
    statistics: "sha256-652c1df657735c02ff329216dd0d935a529447facdcf5919db54ab873067ebc7"
    agreements: ""
  imageServer:
    repository: registry.aggregion.com/enclave-server-nodejs
    pullPolicy: IfNotPresent
    tag: "main"
  imageServices:
    repository: registry.aggregion.com/enclave-external-services
    pullPolicy: IfNotPresent
    tag: "develop"
  configs:
    # the key (pair with public key) is used to authenticate another enclaves
    dataserviceToken: "dataserviceToken"
    authPrivateKey: "PrivateKeyBody"
    listenPort: 8321
    listenInnerPort: 8010
    datalabToken: ""
    prettyLogs: ""
  restartPolicy: Always
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8010"
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 8321
    innerPort: 8010

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 128000m
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: enclave.local
        paths:
          - "/"
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - enclave.local
  resources:
    server: {}
      # if use azure (AKS)
      # limits:
      #   kubernetes.azure.com/sgx_epc_mem_in_MiB: 16

    services: {}
    las: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

      # if use azure (AKS)
      # limits:
      #   kubernetes.azure.com/sgx_epc_mem_in_MiB: 16
  nodeSelector: {}
  tolerations: []
  affinity: {}

dataservice:
  enabled: true
  replicaCount: 1
  nameOverride: ""
  annotations:
    reloader.stakater.com/auto: "true"
  podAnnotations: {}
  restartPolicy: Always
  updateStrategy: null
  securityContext: {}
  imageApi:
    repository: registry.aggregion.com/dataservice-api
    pullPolicy: IfNotPresent
    tag: latest
  imageAtlasEntitySyncer:
    repository: registry.aggregion.com/atlas-entity-syncer
    pullPolicy: IfNotPresent
    tag: latest
  imageJobRunner:
    repository: curlimages/curl
    pullPolicy: IfNotPresent
    tag: latest
  tolerations: []
  affinity: {}
  service:
    type: ClusterIP
    port: 80 # external
  serviceAtlasSyncer:
    type: ClusterIP
    port: 8090 # external
  configAtlasSyncer:
    enabled: false
    port: 8090 # internal
    username: "admin"
    password: "admin"
    atlasBaseUrl: "http://atlas.local"
    cronjob:
      schedule: "*/5 * * * *"
  glossarySyncers:
    enabled: false
  config:
    # accessToken: dataservice-api$ node src/cli token gen -i ${backend.configs.providerName}
    accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiRGF0YSBBY2Nlc3MgVG9rZW4gZm9yIHRoZSBhdXRob3JpemF0aW9uIGluIHRoZSBsb2NhbCBwcm92aWRlciBlbnZpcm9ubWVudCIsImlhdCI6MTYzMjY2MDY1OCwiaXNzIjoic3RhZ2VfcHJvdmlkZXIifQ.DLh9HQHXXTZuGSRrXf9uk6QBiikOHztcZ2aNC7x6wKg" # < fake
    appName: dataservice-api
    logLevel: trace
    logPrettyPrint: false
    nodeEnv: development
    port: 9045 # internal
    mongoDbUri: mongodb://127.0.0.1:27017/ds-api
    mongoDbUriTest: mongodb://agg-dev:18005/ds-api-tests
    mongoDebug: false
    tokenExpirationTimeInSec: 31104000
    tokenSecretKey: data_access_token_secret_key
    tokenIssuer: local_provider_name
    bcmqOrgDecryptKey: it_doesn_not_matter
    bcmqPollingInterval: 200
    bcmqLimit: 1
    trinoHost: localhost
    trinoPort: 8080
    rabbitmqUri: "amqp://127.0.0.1"
    endpoint: "http://aggregion-cdp-dataservice-EDIT_THAT.NAMESPACE.svc.cluster.local:9045/api"
    clickhouseUseDirectConnection: true # since 2021-12-13
    clickhouseIsMocked: false # since 2021-12-13

metadataSeed:
  enabled: false
  replicaCount: 1
  podAnnotations: {}
  restartPolicy: Always
  service:
    type: ClusterIP
    port: 80
  cronjob:
    schedule: "*/30 * * * *"
  image:
    repository: registry.aggregion.com/metadata-seed
    tag: latest
    pullPolicy: IfNotPresent
  config:
    port: 8100
    logLevel: trace
    logPrettyPrint: false
    dmpBackendBaseUrl: "http://dmpbackend"
