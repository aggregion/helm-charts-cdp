{{- if and (.Values.dataservice.enabled) (.Values.dataservice.glossarySyncers.enabled) }}
{{- $dataServiceName := include "cdp.dataservice.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $dataServiceName }}-glossary"
  {{- with .Values.dataservice.annotations }}
  annotations:
      {{- toYaml . | nindent 6 }}
  {{- end }}
  labels:
    {{- include "cdp.dataservice.labels" . | nindent 4 }}
    app.kubernetes.io/component: "glossary"
spec:
  replicas: {{ .Values.dataservice.replicaCount }}
  selector:
    matchLabels:
      {{- include "cdp.dataservice.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.dataservice.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cdp.dataservice.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.dataservice.restartPolicy }}
      serviceAccountName: {{ include "cdp.serviceAccountName" . }}
      containers:
        {{- range $index, $val := .Values.dataservice.glossaryContainers }}
        {{- with $.Values.dataservice }}
        {{- $hcport := (add .probes.common.healthcheckPort $index 1) }}
        - name: {{ $val | quote }}
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
          image: "{{ .imageApi.repository }}:{{ .imageApi.tag }}"
          imagePullPolicy: {{ .imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:{{ $val }}:prod
          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"
          env:
            - name: HEALTHCHECK_PORT
              value: {{ $hcport }}
          {{- if .probes.glossary.livenessEnabled }}
          livenessProbe:
            httpGet:
              path: {{ .probes.common.livenessPath }}
              port: {{ $hcport }}
            timeoutSeconds: 3
            initialDelaySeconds: 5
            periodSeconds: 15
          {{- end }}
          {{- if .probes.glossary.readinessEnabled }}
          readinessProbe:
            httpGet:
              path: {{ .probes.common.readinessPath }}
              port: {{ $hcport }}
            timeoutSeconds: 3
            initialDelaySeconds: 5
            periodSeconds: 15
        {{- end -}}
        {{- end -}}
        {{- end }}
      {{- with .Values.dataservice.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.dataservice.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.dataservice.updateStrategy }}
  strategy:
    {{- toYaml .Values.dataservice.updateStrategy | nindent 4 }}
  {{- end }}
{{- end }}
