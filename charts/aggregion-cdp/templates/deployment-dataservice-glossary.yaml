{{- if and (.Values.dataservice.enabled) (.Values.dataservice.glossarySyncers.enabled) }}
{{- if or
  (.Values.dataservice.glossaryContainers.glossarySyncer.enabled)
  (.Values.dataservice.glossaryContainers.glossaryUpdater.enabled)
  (.Values.dataservice.glossaryContainers.glossaryTermSyncer.enabled)
  (.Values.dataservice.glossaryContainers.glossaryTermUpdater.enabled)
-}}
{{- $dataServiceName := include "cdp.dataservice.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $dataServiceName }}-glossary"
  {{- with .Values.dataservice.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "cdp.dataserviceGlossary.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.dataservice.replicaCount }}
  selector:
    matchLabels:
      {{- include "cdp.dataserviceGlossary.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.dataservice.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cdp.dataserviceGlossary.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.dataservice.restartPolicy }}
      serviceAccountName: {{ include "cdp.serviceAccountName" . }}
      containers:
        {{- if .Values.dataservice.glossaryContainers.glossarySyncer.enabled }}
        - name: glossary-syncer
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}
          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:glossary-syncer:prod
          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"
          env:
            - name: HEALTHCHECK_PORT
              value: {{ .Values.dataservice.glossaryContainers.glossarySyncer.healthcheckPort | quote }}
          resources:
            {{- toYaml .Values.dataservice.glossaryContainers.glossarySyncer.resources | nindent 12 }}
          {{- if .Values.dataservice.probes.glossary.livenessEnabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.dataservice.probes.common.livenessPath }}
              port: {{ .Values.dataservice.glossaryContainers.glossarySyncer.healthcheckPort }}
            timeoutSeconds: 3
            initialDelaySeconds: 5
            periodSeconds: 15
          {{- end }}
          {{- if .Values.dataservice.probes.glossary.readinessEnabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.dataservice.probes.common.readinessPath }}
              port: {{ .Values.dataservice.glossaryContainers.glossarySyncer.healthcheckPort }}
            timeoutSeconds: 3
            initialDelaySeconds: 5
            periodSeconds: 15
          {{- end -}}
        {{- end }}

        {{- if .Values.dataservice.glossaryContainers.glossaryUpdater.enabled }}
        - name: glossary-updater
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}
          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:glossary-updater:prod
          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"
          env:
            - name: HEALTHCHECK_PORT
              value: {{ .Values.dataservice.glossaryContainers.glossaryUpdater.healthcheckPort | quote }}
          resources:
            {{- toYaml .Values.dataservice.glossaryContainers.glossaryUpdater.resources | nindent 12 }}
          {{- if .Values.dataservice.probes.glossary.livenessEnabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.dataservice.probes.common.livenessPath }}
              port: {{ .Values.dataservice.glossaryContainers.glossaryUpdater.healthcheckPort }}
            timeoutSeconds: 3
            initialDelaySeconds: 5
            periodSeconds: 15
          {{- end }}
          {{- if .Values.dataservice.probes.glossary.readinessEnabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.dataservice.probes.common.readinessPath }}
              port: {{ .Values.dataservice.glossaryContainers.glossaryUpdater.healthcheckPort }}
            timeoutSeconds: 3
            initialDelaySeconds: 5
            periodSeconds: 15
          {{- end -}}
        {{- end }}

        {{- if .Values.dataservice.glossaryContainers.glossaryTermSyncer.enabled }}
        - name: glossary-term-syncer
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}
          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:glossary-term-syncer:prod
          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"
          env:
            - name: HEALTHCHECK_PORT
              value: {{ .Values.dataservice.glossaryContainers.glossaryTermSyncer.healthcheckPort | quote }}
          resources:
            {{- toYaml .Values.dataservice.glossaryContainers.glossaryTermSyncer.resources | nindent 12 }}
          {{- if .Values.dataservice.probes.glossary.livenessEnabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.dataservice.probes.common.livenessPath }}
              port: {{ .Values.dataservice.glossaryContainers.glossaryTermSyncer.healthcheckPort }}
            timeoutSeconds: 3
            initialDelaySeconds: 5
            periodSeconds: 15
          {{- end }}
          {{- if .Values.dataservice.probes.glossary.readinessEnabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.dataservice.probes.common.readinessPath }}
              port: {{ .Values.dataservice.glossaryContainers.glossaryTermSyncer.healthcheckPort }}
            timeoutSeconds: 3
            initialDelaySeconds: 5
            periodSeconds: 15
          {{- end -}}
        {{- end }}

        {{- if .Values.dataservice.glossaryContainers.glossaryTermUpdater.enabled }}
        - name: glossary-term-updater
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}
          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:glossary-term-updater:prod
          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"
          env:
            - name: HEALTHCHECK_PORT
              value: {{ .Values.dataservice.glossaryContainers.glossaryTermUpdater.healthcheckPort | quote }}
          resources:
            {{- toYaml .Values.dataservice.glossaryContainers.glossaryTermUpdater.resources | nindent 12 }}
          {{- if .Values.dataservice.probes.glossary.livenessEnabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.dataservice.probes.common.livenessPath }}
              port: {{ .Values.dataservice.glossaryContainers.glossaryTermUpdater.healthcheckPort }}
            timeoutSeconds: 3
            initialDelaySeconds: 5
            periodSeconds: 15
          {{- end }}
          {{- if .Values.dataservice.probes.glossary.readinessEnabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.dataservice.probes.common.readinessPath }}
              port: {{ .Values.dataservice.glossaryContainers.glossaryTermUpdater.healthcheckPort }}
            timeoutSeconds: 3
            initialDelaySeconds: 5
            periodSeconds: 15
          {{- end -}}
        {{- end }}
      {{- with .Values.dataservice.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.dataservice.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.dataservice.updateStrategy }}
  strategy:
    {{- toYaml .Values.dataservice.updateStrategy | nindent 4 }}
  {{- end }}
{{- end -}}
{{- end }}
