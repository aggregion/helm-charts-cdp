{{- if and (.Values.enclave.enabled) (.Values.enclave.scone.enabled) }}
{{- $name := "enclave" }}
{{- $enclaveName := include "cdp.enclave.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $enclaveName }}-scone"
  {{- with .Values.enclave.annotations }}
  annotations:
      {{- toYaml . | nindent 6 }}
  {{- end }}
  labels:
    {{- include "cdp.enclave.labels" . | nindent 4 }}
    app.kubernetes.io/component: enclave
spec:
  replicas: {{ .Values.enclave.replicaCount }}
  selector:
    matchLabels:
      {{- include "cdp.enclave.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.enclave.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "cdp.enclave.selectorLabels" . | nindent 8 }}
    spec:
      hostname: "{{ .Values.enclave.hostname }}"
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.enclave.restartPolicy }}
      serviceAccountName: {{ include "cdp.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.enclave.podSecurityContext | nindent 8 }}
      containers:
        - name: "enclave-server"
          securityContext:
            privileged: true
            {{- if .Values.enclave.securityContext }}
            {{- toYaml .Values.enclave.securityContext | nindent 12 }}
            {{- end }}
          image: "{{ .Values.enclave.imageServer.repository }}:{{ .Values.enclave.imageServer.tag }}"
          imagePullPolicy: {{ .Values.enclave.imageServer.pullPolicy }}
          ports:
            - name: httpenclave
              containerPort: {{ .Values.enclave.configs.listenPort }}
              protocol: TCP
            - name: innerenclave
              containerPort: {{ .Values.enclave.configs.listenInnerPort }}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: "{{ $enclaveName }}-config"
            - secretRef:
                name: "{{ $enclaveName }}-secrets"
          env:
            - name: "LAS_HOST"
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          {{- if and (.Values.livenessProbe.enabled) (.Values.enclave.probes.livenessEnabled) }}
          livenessProbe:
            httpGet:
              path: {{ .Values.enclave.probes.livenessPath }}
              port: {{ .Values.enclave.configs.listenInnerPort }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            initialDelaySeconds: {{ .Values.enclave.probes.livenessInitialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end}}
          {{- if and (.Values.readinessProbe.enabled) (.Values.enclave.probes.readinessEnabled) }}
          readinessProbe:
            httpGet:
              path: {{ .Values.enclave.probes.readinessPath }}
              port: {{ .Values.enclave.configs.listenInnerPort }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            initialDelaySeconds: {{ .Values.enclave.probes.readinessInitialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.enclave.resources.server | nindent 12 }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/local.json
              subPath: local.json
              name: local-config-volume
            - mountPath: /var/keys/auth-key.pem
              subPath: auth-key.pem
              name: local-secrets-volume
            - mountPath: "{{ .Values.enclave.sgx.device }}"
              name: dev-sgx

        - name: "enclave-services"
          securityContext:
            {{- toYaml .Values.enclave.securityContext | nindent 12 }}
          image: "{{ .Values.enclave.imageServices.repository }}:{{ .Values.enclave.imageServices.tag }}"
          imagePullPolicy: {{ .Values.enclave.imageServer.pullPolicy }}
          envFrom:
            - configMapRef:
                name: "{{ $enclaveName }}-services-config"
            - secretRef:
                name: "{{ $enclaveName }}-services-secrets"

          resources:
            {{- toYaml .Values.enclave.resources.services | nindent 12 }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp

      volumes:
        - name: tmp
          hostPath:
            path: "/tmp/enclave"
        - name: local-config-volume
          configMap:
            name: "{{ $enclaveName }}-config-files"
        - name: local-secrets-volume
          secret:
            secretName: "{{ $enclaveName }}-file-secrets"
        - name: dev-sgx
          hostPath:
            path: "{{ .Values.enclave.sgx.device }}"
      {{- with .Values.enclave.sgx.nodeWithSgxSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.enclave.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.enclave.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.enclave.updateStrategy }}
  strategy:
    {{- toYaml .Values.enclave.updateStrategy | nindent 4 }}
  {{- end }}
{{- end }}
