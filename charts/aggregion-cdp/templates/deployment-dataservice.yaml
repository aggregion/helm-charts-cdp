{{- if .Values.dataservice.enabled }}
{{- $dataServiceName := include "cdp.dataservice.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $dataServiceName }}"
  {{- with .Values.dataservice.annotations }}
  annotations:
      {{- toYaml . | nindent 6 }}
  {{- end }}
  labels:
    {{- include "cdp.dataservice.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.dataservice.replicaCount }}
  selector:
    matchLabels:
      {{- include "cdp.dataservice.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.dataservice.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cdp.dataservice.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.dataservice.restartPolicy }}
      serviceAccountName: {{ include "cdp.serviceAccountName" . }}
      initContainers:
        - name: "init-dataservice-api"
          securityContext:
              { { - toYaml .Values.dataservice.securityContext | nindent 12 } }

          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          ports:
            - name: httpapi
              containerPort: {{ .Values.dataservice.config.port }}
          args:
            - npm
            - run
            - migrate:up
          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"
      containers:
        - name: "dataservice-api"
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}

          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          ports:
            - name: httpapi
              containerPort: {{ .Values.dataservice.config.port }}
          args:
            - npm
            - run
            - start:prod

          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"

        - name: "dataset-syncer"
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}

          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:dataset-syncer:prod

          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"

        - name: "dataset-updater"
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}

          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:dataset-updater:prod

          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"

        - name: "instance-syncer"
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}

          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:instance-syncer:prod

          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"

        {{- if .Values.dataservice.glossarySyncers.enabled }}
        - name: "glossary-syncer"
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}

          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:glossary-syncer:prod

          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"

        - name: "glossary-updater"
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}

          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:glossary-updater:prod

          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"

        - name: "glossary-term-syncer"
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}

          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:glossary-term-syncer:prod

          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"

        - name: "glossary-term-updater"
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}

          image: "{{ .Values.dataservice.imageApi.repository }}:{{ .Values.dataservice.imageApi.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageApi.pullPolicy }}
          args:
            - npm
            - run
            - start:worker:glossary-term-updater:prod

          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-config"
            - secretRef:
                name: "{{ $dataServiceName }}-secrets"
        {{- end }}

        - name: "atlas-entity-syncer"
          securityContext:
            {{- toYaml .Values.dataservice.securityContext | nindent 12 }}

          image: "{{ .Values.dataservice.imageAtlasEntitySyncer.repository }}:{{ .Values.dataservice.imageAtlasEntitySyncer.tag }}"
          imagePullPolicy: {{ .Values.dataservice.imageAtlasEntitySyncer.pullPolicy }}

          args:
            - npm
            - run
            - start:prod

          ports:
            - name: atlassyncport
              containerPort: {{ .Values.dataservice.configAtlasSyncer.port }}

          envFrom:
            - configMapRef:
                name: "{{ $dataServiceName }}-atlas-syncer-config"

      {{- with .Values.dataservice.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.dataservice.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.dataservice.updateStrategy }}
  strategy:
    {{- toYaml .Values.dataservice.updateStrategy | nindent 4 }}
  {{- end }}
{{- end }}
