# requirements: gettext
atlas:
  auth:
    basic:
      password: admin
      username: admin
    bearer:
      clientId: atlas
      clientSecret: atlasclientsecret
      tokenUrl: https://keycloak/realms/aggregion/protocol/openid-connect/token # CHANGEIT
    type: basic
  baseUrl: http://atlas:21000 # CHANGEIT
blockchainCommon:
  smartContracts:
    base:
      name: "$BLOCKCHAIN_COMMON_BASE_CONTRACT"
    catalogs:
      name: "$BLOCKCHAIN_COMMON_CATALOGS_CONTRACT"
    users:
      name: "$BLOCKCHAIN_COMMON_USERS_CONTRACT"
audienceDatasetConsumer:
  enabled: false
  image:
    repository: "$IMAGE_CDP_AUDIENCEDATASETCONSUMER_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_AUDIENCEDATASETCONSUMER_IMAGE_TAG"
  config:
    logLevel: info
    metrics:
      enabled: false
  probes:
    livenessEnabled: false
    readinessEnabled: false
authservice:
  enabled: true
  image:
    repository: "$IMAGE_CDP_AUTHSERVICE_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_AUTHSERVICE_IMAGE_TAG"
  config:
    jwtSecretKey: "$AUTH_SERVICE_JWT_SECRET_KEY" # GENERATED
    logLevel: info
    mongoDbUri: mongodb://aggregion-externals-mongo$MONGO_SVC_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:27017/auth-service
backend:
  image:
    repository: "$IMAGE_CDP_BACK_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_BACK_IMAGE_TAG"
  crond:
    image:
      repository: "$IMAGE_CDP_BACK_CROND_IMAGE_REPO"
      tag: "$IMAGE_CDP_BACK_CROND_IMAGE_TAG"
      pullPolicy: IfNotPresent
  dbseed:
    image:
      repository: "$IMAGE_CDP_BACK_DBSEED_IMAGE_REPO"
      tag: "$IMAGE_CDP_BACK_DBSEED_IMAGE_TAG"
      pullPolicy: IfNotPresent
  api:
    livenessEnabled: true
    readinessEnabled: true
  bcDatasetRequestsUpdater:
    livenessEnabled: true
    readinessEnabled: true
  bcInteractionsUpdater:
    livenessEnabled: true
    readinessEnabled: true
  bcProjectsUpdater:
    livenessEnabled: true
    readinessEnabled: true
  bcScriptsUpdater:
    livenessEnabled: true
    readinessEnabled: true
  blockchainUpdater:
    livenessEnabled: true
    readinessEnabled: true
  cleanroomStatusWatcher:
    livenessEnabled: true
    readinessEnabled: true
  configs:
    accountName: "$ACCOUNT_ID"
    baseUrl: $BASE_FRONT_URL_SCHEMA://app.$BASE_FRONT_DOMAIN
    bcmqMaxAllowedErrorCount: 20
    bcmqPollingInterval: 1000
    clickhouseDb: somedatabase # CHANGEIT
    clickhouseHost: 127.0.0.1 # CHANGEIT
    clickhousePassword: somepass # CHANGEIT
    clickhousePort: 8123 # CHANGEIT
    clickhouseUser: someuser # CHANGEIT
    dataStorageSize: 10Gi
    datalabApiUrl: http://aggregion-dc-dc-dc.$DC_NS.svc.$CLUSTER_DOMAIN:8080
    datalabAuthUrl: http://aggregion-cdp-backend$CDP_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:8080/auth/datalab/vm/check-request
    datalabCpuLimit: "8"
    datalabDmpNamespace: $CDP_NS
    datalabMemoryLimitGb: "$CDP_DATALAB_MEMORY_LIMIT_GB"
    datalabNamespace: $CDP_DATALAB_NAMESPACE
    datalabOverwriteDomain: app.$BASE_FRONT_DOMAIN
    datalabPassword: admin
    datalabPlatformId: "$CDP_DATALAB_PLATFORM_ID"
    datalabWebhookUrl: http://aggregion-cdp-backend$CDP_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:8080/webhooks
    dmpSecret: "$BACKEND_CONFIGS_DMP_SECRET" # GENERATED
    enclaveEndpoint: http://aggregion-cdp-enclave$CDP_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:8010
    eosDecryptPk: |-
      $PRIVATE_KEY_6S
    eosNodeUrl: "$BACKEND_CONFIG_EOSNODEURL" # CHANGEIT
    eosWalletOwnerOrgId: "$ACCOUNT_ID"
    eosWalletOwnerPk: $EOS_WALLET_PRIVATE_KEY
    eosWalletOwnerPub: $EOS_WALLET_PUBLIC_KEY
    features:
      getUserRolesFromHeaders: false
      userRolesManagment: true
    gitlab:
      host: $GITLAB_SVC_URL
      personalAccessToken: "$GITLAB_TOKEN"
    graphQLPlayground:
      enabled: true
    jwtSecret: "$BACKEND_CONFIGS_JWT_SECRET" # GENERATED
    listenPort: 15432
    logLevel: info
    metadataSeedApiUrl: http://aggregion-cdp-metadataseed$CDP_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN
    metadataServiceToken: NEED_GENERATING
    metrics:
      isEnabled: false
    migrationEnabled: true
    mongoUrl: mongodb://aggregion-externals-mongo$MONGO_SVC_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:27017/dmp
    pipelineRunner:
      debugMode: false
      pipelines:
        cleanroom:
          namespace: pipelines
          pipelineName: debug-cleanroom-pipelines$URL_SUFFIX
          pvcSize: 20Gi
          serviceAccountName: pipeline-services$URL_SUFFIX-runner-sa
          statusQueue: pipeline_cleanroom_event_status
          storageClassName: ""
          timeout: 24h0m0s
    providerInstanceId: "$ACCOUNT_ID"
    providerName: "$ACCOUNT_ID"
    rabbitmqUrl: amqp://aggregion-externals-rabbit$RABBIT_SVC_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:5672
    redisHost: aggregion-externals-redis$REDIS_SVC_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN
    redisPassword: ""
    redisPort: 6379
    redisPrefix: 'agg:'
    serviceBlockchainUpdaterEnabled: true
    serviceBlockchainUpdaterOldStyle: false
    serviceDatasetUploaderEnabled: false
    serviceJobSchedulerEnabled: true
    serviceMatchingStatusResponseWatcherEnabled: true
    serviceMatchingStatusWatcherEnabled: true
    servicePanelSegmentUploaderEnabled: false
    servicePipelineDebugCleanroomStatusWatcherEnabled: true
    servicePipelineDebugHasherStatusWatcherEnabled: false
    serviceSegmentsEnabled: true
    systemSettings:
      analytics:
        enabled: false
      audiences:
        enabled: false
      campaigns:
        enabled: false
      coupones:
        enabled: false
      dataCatalogue:
        enabled: true
      dataMarts:
        enabled: true
      datalab:
        enabled: true
        features:
          audienceDatasets: true
      glossary:
        enabled: true
      marketplace:
        enabled: true
      surveys:
        enabled: false
    webhookTokenExpirationTime: 3600000
    ddm:
      address: ddm$URL_SUFFIX-manager.$CDP_NS.svc.$CLUSTER_DOMAIN:80
      s3:
        endpoint: "http://minio-common.minio.svc.$CLUSTER_DOMAIN:9000" # CHANGEIT
        accessKey: "CHANGEIT"
        secretKey: "CHANGEIT"
        bucket: "CHANGEIT"
  datalabProxy:
    replicaCount: 1
    resolverServiceDomain: "$BACKEND_DATALABPROXY_RESOLVERSERVICEDOMAIN"
    image:
      repository: "$IMAGE_CDP_BACK_DATALABPROXY_IMAGE_REPO"
      tag: "$IMAGE_CDP_BACK_DATALABPROXY_IMAGE_TAG"
      pullPolicy: IfNotPresent
  datasetUploader:
    livenessEnabled: false
    readinessEnabled: false
  debugHasherStatusWatcher:
    livenessEnabled: false
    readinessEnabled: false
  enabled: true
  jobScheduler:
    livenessEnabled: true
    readinessEnabled: true
cleos:
  enabled: false
  image:
    repository: "$IMAGE_CDP_CLEOS_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_CLEOS_IMAGE_TAG"
dataservice:
  imageApi:
    repository: "$IMAGE_CDP_DATASERVICE_API_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_DATASERVICE_API_TAG"
  config:
    accessToken: $ACCOUNT_ID
    appName: dataservice-api
    bcmqMaxAllowedErrorCount: 50
    bcmqPollingInterval: 1000
    clickhouseUseDirectConnection: true
    credentialsDecryptKey: $DATASERVICE_CONFIG_CREDENTIALSDECRYPTKEY # GENERATED
    endpoint: http://aggregion-cdp-dataservice$CDP_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN/api
    logLevel: trace
    logPrettyPrint: false
    metadataServiceToken: NEED_GENERATING
    mongoDbUri: mongodb://aggregion-externals-mongo$MONGO_SVC_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:27017/ds
    mongoDebug: false
    nodeEnv: production
    port: 9045
    rabbitmqUri: amqp://aggregion-externals-rabbit$RABBIT_SVC_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:5672
    tokenIssuer: "$ACCOUNT_ID"
    tokenSecretKey: "$DATASERVICE_CONFIG_TOKENSECRETKEY" # GENERATED
    trinoHost: trino$URL_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN
  configAtlasSyncer:
    atlasBaseUrl: http://doesnotmatter
    cronjob:
      schedule: '*/15 * * * *'
    enabled: true
    password: admin
    rabbitmqUrl: amqp://aggregion-externals-rabbit$RABBIT_SVC_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:5672
    username: admin
  datasetDatasetSyncer:
    enabled: true
  datasetDatasetUpdater:
    enabled: true
  datasetInstanceSyncer:
    enabled: true
  datasetLogsSyncers:
    enabled: true
  enabled: true
  glossaryContainers:
    glossarySyncer:
      enabled: true
    glossaryTermSyncer:
      enabled: true
    glossaryTermUpdater:
      enabled: true
    glossaryUpdater:
      enabled: true
  glossarySyncers:
    enabled: true
  imageJobRunner:
    pullPolicy: IfNotPresent
    repository: curlimages/curl
    tag: latest
  probes:
    api:
      livenessEnabled: true
      readinessEnabled: true
    atlasEntitySyncer:
      livenessEnabled: true
      readinessEnabled: true
    datasetLogs:
      livenessEnabled: true
      readinessEnabled: true
    datasetSyncer:
      livenessEnabled: true
      readinessEnabled: true
    datasetUpdater:
      livenessEnabled: true
      readinessEnabled: true
    glossary:
      livenessEnabled: true
      readinessEnabled: true
    instanceSyncer:
      livenessEnabled: true
      readinessEnabled: true
dbMetadataSync:
  enabled: false
  image:
    repository: "$IMAGE_CDP_DBMETADATASYNC_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_DBMETADATASYNC_IMAGE_TAG"
  config:
    metadataServiceToken: NEED_GENERATING
dbMetadataSyncConsumer:
  enabled: false
  image:
    repository: "$IMAGE_CDP_DBMETADATASYNCCONSUMER_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_DBMETADATASYNCCONSUMER_IMAGE_TAG"

emailservice:
  enabled: true
  image:
    repository: "$IMAGE_CDP_EMAILSERVICE_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_EMAILSERVICE_IMAGE_TAG"
  probes:
    livenessEnabled: true
    readinessEnabled: true
enclave:
  affinity: {}
  configs:
    dataserviceBaseURL: http://aggregion-cdp-dataservice$CDP_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN
    dataserviceToken: NEED_GENERATING
    dmpBaseURL: http://aggregion-cdp-backend$CDP_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:8080/enclave
    nodeTlsRejectUnauthorized: false
    prettyLogs: "false"
    providerSecret: $BACKEND_CONFIGS_DMP_SECRET # GENERATED
    rabbitmqPrefetch: 2
    tmpHostPath: /tmp
    workerHeapSizeMb: 64000
  enabled: true
  imageServer:
    repository: "$IMAGE_CDP_ENCLAVE_SERVER_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_ENCLAVE_SERVER_TAG"
  imageServices:
    pullPolicy: IfNotPresent
    repository: "$IMAGE_CDP_ENCLAVE_SERVICE_REPO"
    tag: latest
  ingress:
    annotations: {}
    enabled: true
    hosts:
    - host: enclave.$BASE_FRONT_DOMAIN
      paths:
      - /
    tls:
    - hosts:
      - enclave.$BASE_FRONT_DOMAIN
      secretName: enclave-front-tls # CHANGEIT
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  probes:
    livenessEnabled: false
    livenessInitialDelaySeconds: 400
    readinessEnabled: false
    readinessInitialDelaySeconds: 400
  resources:
    server:
      limits:
        memory: 1Gi
      requests:
        memory: 500Mi
    services: {}
  restartPolicy: Always
  scone:
    enabled: false
    lasImage:
      repository: "$IMAGE_CDP_ENCLAVE_SCONE_LAS_IMAGE_REPO"
      pullPolicy: "IfNotPresent"
      tag: "$IMAGE_CDP_ENCLAVE_SCONE_LAS_IMAGE_TAG"
  securityContext: {}
  tolerations: []
frontend:
  enabled: true
  image:
    repository: "$IMAGE_CDP_FRONT_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_FRONT_IMAGE_TAG"
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 128000m
    enabled: true
    hosts:
    - host: app.$BASE_FRONT_DOMAIN
    tls:
    - hosts:
      - app.$BASE_FRONT_DOMAIN
      paths:
        backend:
          service:
            name: aggregion-cdp-backend
            port:
              name: httpapi
        pathType: Prefix
      secretName: front-tls # CHANGEIT
gatekeeper:
  config:
    clientId: dcp # CHANGEIT
    clientSecret: $GATEKEEPER_DCP_CLIENT_SECRET
    discoveryUrl: https://kc.$BASE_FRONT_DOMAIN/realms/aggregion/.well-known/openid-configuration
    encryptionKey: $GK_CONFIG_ENCRYPTION_KEY
    redirectionUrl: $BASE_FRONT_URL_SCHEMA://app.$BASE_FRONT_DOMAIN
    signInPage: ""
    storeUrl: ""
    verbose: true
  enabled: true
  image:
    repository: "$IMAGE_CDP_GK_IMAGE_REPO"
    tag: "$IMAGE_CDP_GK_IMAGE_TAG"
imagePullSecrets:
- name: aggregionregistry # CHANGEIT
metadataParams:
  credentials:
    encryptionKey: "$MD_PARAMS_CREDS_ENCRYPTION_KEY" # GENERATED
    iv: "$MD_PARAMS_CREDS_IV" # GENERATED
metadataSeed:
  enabled: true
  image:
    repository: "$IMAGE_CDP_METADATASEED_IMAGE_REPO"
    tag: "$IMAGE_CDP_METADATASEED_IMAGE_TAG"
    pullPolicy: IfNotPresent
  config:
    dmpBackendBaseUrl: http://aggregion-cdp-backend$CDP_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:8080
    nodeTlsRejectUnauthorized: true
metadataService:
  enabled: false
  image:
    repository: "$IMAGE_CDP_METADATASERVICE_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_METADATASERVICE_IMAGE_TAG"
metrics:
  enabled: false
  path: /metrics
  serviceMonitor:
    enabled: false
oidcprovider:
  image:
    repository: "$IMAGE_CDP_OIDCPROVIDER_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_OIDCPROVIDER_IMAGE_TAG"
  config:
    clientPostLogoutRedirectUris:
    - https://kc.$BASE_FRONT_DOMAIN/realms/aggregion/broker/aggregion-oidc/endpoint/logout_response
    clientRedirectUris:
    - https://kc.$BASE_FRONT_DOMAIN/realms/aggregion/broker/aggregion-oidc/endpoint
    logLevel: info
    successSignupRedirectUri: $BASE_FRONT_URL_SCHEMA://app.$BASE_FRONT_DOMAIN
    ttl:
      accessToken: 1000000
  enabled: true
  ingress:
    enabled: true
    hosts:
    - host: auth.$BASE_FRONT_DOMAIN
    tls:
    - hosts:
      - auth.$BASE_FRONT_DOMAIN
      secretName: auth-front-tls # CHANGEIT
  probes:
    livenessEnabled: true
    readinessEnabled: true
ddmEventConsumer:
  enabled: true
  image:
    repository: "$IMAGE_CDP_DDMEVENTCONSUMER_IMAGE_REPO"
    pullPolicy: IfNotPresent
    tag: "$IMAGE_CDP_DDMEVENTCONSUMER_IMAGE_TAG"
  probes:
    livenessEnabled: false
    readinessEnabled: false
  config:
    logLevel: trace
    metrics:
      enabled: true
    consumer:
      prefetchCount: 1
      queueName: "ddm-events"
publishExtendedAgreements:
  cronjob:
    enabled: true
providerLinks:
- name: $ACCOUNT_ID
  url: http://aggregion-cdp-enclave$CDP_SUFFIX.$CDP_NS.svc.$CLUSTER_DOMAIN:8010
providerNames:
  $ACCOUNT_ID:
    en: Retail network # CHANGEIT
    ru: Розничная сеть # CHANGEIT
providers:
- "$ACCOUNT_ID"
