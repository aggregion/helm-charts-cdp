{{- if .Values.atlas.enabled }}
{{- $atlasName := include "exts.atlas.fullname" . }}
{{- $zookeeperName := include "exts.zookeeper.fullname" . }}
{{- $cassandraName := include "exts.cassandra.fullname" . }}
{{- $solrName := include "exts.solr.fullname" . }}
{{- $kafkaName := include "exts.kafka.fullname" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ $atlasName }}"
  labels:
    {{- include "exts.atlas.labels" . | nindent 4 }}
spec:
  replicas: 1
  serviceName: "{{ $atlasName }}"
  selector:
    matchLabels:
      {{- include "exts.atlas.selectorLabels" . | nindent 6 }}
  updateStrategy:
    {{- toYaml .Values.atlas.updateStrategy | nindent 4 }}
  podManagementPolicy: {{ .Values.atlas.podManagementPolicy }}
  template:
    metadata:
    {{- with .Values.atlas.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "exts.atlas.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # serviceAccountName: {{/* include "exts.serviceAccountName" . */}}
      securityContext:
        {{- toYaml .Values.atlas.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-zookeeper
          image: "{{ .Values.busybox.image.repository }}:{{ .Values.busybox.image.tag }}"
          command:
            - '/bin/sh'
            - '-c'
            - nc -vz "{{ $zookeeperName }}-2.{{ $zookeeperName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}" 2181
        - name: wait-for-solr
          image: "{{ .Values.busybox.image.repository }}:{{ .Values.busybox.image.tag }}"
          command:
            - '/bin/sh'
            - '-c'
            - nc -vz "{{ $solrName }}-0.{{ $solrName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}" 8983
        - name: copy-solr-collections
          image: "{{ .Values.atlas.image.repository }}:{{ .Values.atlas.image.tag | default .Chart.AppVersion }}"
          command:
            - /bin/sh
            - -c
            - cp -r /opt/solr-config/* /tmp/solr-configs
          volumeMounts:
            - name: solr-configs
              mountPath: /tmp/solr-configs
        {{- if and .Values.atlas.keycloak.enableAuth .Values.atlas.truststore.enabled }}
        - name: truststore-generation-for-atlas
          image: "{{ .Values.atlas.image.repository }}:{{ .Values.atlas.image.tag }}"
          command:
            - '/bin/sh'
            - '-c'
            - |
              /truststore-password.exp
              keytool -importcert -trustcacerts -keystore {{ .Values.atlas.truststore.file }} -alias keycloak -keypass $TRUSTSTORE_PASSWORD -storepass $TRUSTSTORE_PASSWORD -file $SERVER_TLS -noprompt
          env:
            - name: SERVER_TLS
              value: /opt/atlas/secret/tls.crt
            - name: CREDENTIAL_PROVIDER_STORE_FILE
              value: {{ .Values.atlas.truststore.credsFile }}
            - name: TRUSTSTORE_PASSWORD
              value: "{{ .Values.atlas.truststore.password }}"
          volumeMounts:
            - name: atlas-secret
              mountPath: /opt/atlas/secret
            - name: data
              mountPath: /opt/atlas/data
        {{- end }}
        - name: init-solr-collections
          image: "{{ .Values.solr.image.repository }}:{{ .Values.solr.image.tag | default .Chart.AppVersion }}"
          command:
            - /bin/sh
            - '-c'
            - >-
              ( ! solr healthcheck -c vertex_index ) && solr zk upconfig -n vertex_index -d /tmp/solr-configs && solr
              create -c vertex_index -p $SOLR_PORT; ( ! solr healthcheck -c edge_index ) && solr zk upconfig -n edge_index -d /tmp/solr-configs &&
              solr create -c edge_index  -p $SOLR_PORT; ( ! solr healthcheck -c fulltext_index
              ) && solr zk upconfig -n fulltext_index -d /tmp/solr-configs && solr create -c fulltext_index -p $SOLR_PORT;
              solr zk upconfig -n atlas -d /tmp/solr-configs;
              true
          volumeMounts:
            - name: solr-configs
              mountPath: /tmp/solr-configs
          env:
            - name: SOLR_PORT
              value: '8983'
            - name: SOLR_HOST
              value: "{{ $solrName }}-0.{{ $solrName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
            - name: ZK_HOST
              value: "{{ $zookeeperName }}-0.{{ $zookeeperName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }},{{ $zookeeperName }}-1.{{ $zookeeperName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }},{{ $zookeeperName }}-2.{{ $zookeeperName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}/solr"
        {{- if .Values.atlas.cassandra.auth.enabled }}
        - name: cassandra-authenticator
          image: "{{ .Values.atlas.image.repository }}:{{ .Values.atlas.image.tag }}"
          imagePullPolicy: {{ .Values.atlas.image.pullPolicy }}
          command:
            - '/bin/sh'
            - '-c'
            - |
              cp -a conf/. /tmp2
              if [ ! $(grep ^atlas.graph.storage.username /tmp2/atlas-application.properties.template) ]; then
                echo "atlas.graph.storage.username={{ .Values.atlas.cassandra.auth.username }}" >> /tmp2/atlas-application.properties.template
                echo "atlas.graph.storage.password={{ .Values.atlas.cassandra.auth.password }}" >> /tmp2/atlas-application.properties.template
              fi
          volumeMounts:
            - mountPath: /tmp2
              name: atlasconfdata
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        {{- end }}
      containers:
        - name: "atlas"
          securityContext:
            {{- toYaml .Values.atlas.securityContext | nindent 12 }}
          image: "{{ .Values.atlas.image.repository }}:{{ .Values.atlas.image.tag }}"
          imagePullPolicy: {{ .Values.atlas.image.pullPolicy }}
          ports:
            - name: client
              containerPort: {{ .Values.atlas.listenPort }}
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /opt/atlas/data
            {{- if .Values.atlas.cassandra.auth.enabled }}
            - name: atlasconfdata
              mountPath: /opt/apache-atlas-3.0.0-SNAPSHOT/conf
            {{- end }}
          resources:
            {{- toYaml .Values.atlas.resources | nindent 12 }}
          env: # need refactoring
            - name: ZOOKEEPER_HOST
              value: "{{ $zookeeperName }}-0.{{ $zookeeperName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }},{{ $zookeeperName }}-1.{{ $zookeeperName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }},{{ $zookeeperName }}-2.{{ $zookeeperName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
            - name: SOLR_ZOOKEEPER_HOST
              value: "{{ $zookeeperName }}-0.{{ $zookeeperName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }},{{ $zookeeperName }}-1.{{ $zookeeperName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }},{{ $zookeeperName }}-2.{{ $zookeeperName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}/solr"
            - name: CASSANDRA_HOST
              value: "{{ $cassandraName }}-0.{{ $cassandraName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
            - name: SOLR_HOST
              value: "{{ $solrName }}-0.{{ $solrName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
            - name: KAFKA_HOST
              value: "{{ $kafkaName }}-0.{{ $kafkaName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
            - name: ATLAS_USER_ADMIN_LOGIN
              value: "{{ .Values.atlas.users.admin.login }}"
            - name: ATLAS_USER_ADMIN_PASSWORD
              value: "{{ .Values.atlas.users.admin.password }}"
            - name: ATLAS_USER_DST_LOGIN
              value: "{{ .Values.atlas.users.datasteward.login }}"
            - name: ATLAS_USER_DST_PASSWORD
              value: "{{ .Values.atlas.users.datasteward.password }}"
            - name: ATLAS_USER_DSCI_LOGIN
              value: "{{ .Values.atlas.users.datascientist.login }}"
            - name: ATLAS_USER_DSCI_PASSWORD
              value: "{{ .Values.atlas.users.datascientist.password }}"
            - name: FILE_ENABLE_AUTH
              value: "{{ .Values.atlas.file.enableAuth }}"
            - name: KEYCLOAK_ENABLE_AUTH
              value: "{{ .Values.atlas.keycloak.enableAuth }}"
            - name: KEYCLOAK_REALM
              value: "{{ .Values.atlas.keycloak.realm }}"
            - name: KEYCLOAK_AUTH_SERVER_URL
              value: "{{ .Values.atlas.keycloak.authServerUrl }}"
            - name: KEYCLOAK_SSL_REQUIRED
              value: "{{ .Values.atlas.keycloak.sslRequired }}"
            - name: KEYCLOAK_RESOURCE
              value: "{{ .Values.atlas.keycloak.resource }}"
            - name: KEYCLOAK_CREDENTIALS_SECRET
              value: "{{ .Values.atlas.keycloak.credentials.secret }}"
            {{- if and .Values.atlas.truststore.enabled .Values.atlas.truststore.file }}
            - name: TRUSTSTORE_FILE_PATH
              value: "{{ .Values.atlas.truststore.file }}"
            - name: CREDENTIAL_PROVIDER_STORE_FILE
              value: "{{ .Values.atlas.truststore.credsFile }}"
            - name: TRUSTSTORE_PASSWORD
              value: "{{ .Values.atlas.truststore.password }}"
            - name: ATLAS_OPTS
              value: "-Djavax.net.ssl.trustStore={{ .Values.atlas.truststore.file }}"
            {{- end }}
            - name: "janusgraph.graph.replace-instance-if-exists"
              value: "true"
          livenessProbe:
            initialDelaySeconds: 300
            exec:
              command:
                - /bin/sh
                - -c
                - nc -vz "{{ $atlasName }}-0.{{ $atlasName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}" 21000
          # Atlas established connection to cassandra via IP. If cassandra pod restart, IP of POD will changes,
          # but Atlas will continue try to reach cassandr via old IP.
          # Check for open tcp port cassandra:9160 via curl, get error 'curl: (52) Empty reply from server'
          # If last command error code not equal to 52, we decide, that cassandra is unreachable and restart atlas to reconnect via new IP.
          # livenessProbe:
          #   exec:
          #     command:
          #     - /bin/sh
          #     - -c
          #     - >-
          #         curl -s -m2 {{ $cassandraName }}-0.{{ $cassandraName }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:9160;
          #         if [ $? -ne 52 ]; then echo 'cassandra livecheck fail'; exit 1; fi
          #   initialDelaySeconds: 300
          #   periodSeconds: 5
      restartPolicy: {{ .Values.atlas.restartPolicy }}
      volumes:
        - name: data
          emptyDir: {}
        - name: solr-configs
          emptyDir: {}
        {{- if .Values.atlas.cassandra.auth.enabled }}
        - name: atlasconfdata
          emptyDir: {}
        {{- end }}
        - name: atlas-secret
          secret:
            secretName: atlas-secret
            items:
              - key: tls.crt
                path: tls.crt
      {{- with .Values.atlas.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.atlas.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.atlas.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
