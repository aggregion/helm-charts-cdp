apiVersion: apps/v1
kind: Deployment
metadata:
  name: tekton-pipelines-controller
  labels:
    app.kubernetes.io/name: controller
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: default
    app.kubernetes.io/version: "v0.36.0"
    app.kubernetes.io/part-of: tekton-pipelines
    # tekton.dev/release value replaced with inputs.params.versionTag in pipeline/tekton/publish.yaml
    pipeline.tekton.dev/release: "v0.36.0"
    # labels below are related to istio and should not be used for resource lookup
    version: "v0.36.0"
spec:
  replicas: {{ .Values.controller.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: controller
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: default
      app.kubernetes.io/part-of: tekton-pipelines
  template:
    metadata:
      labels:
        app.kubernetes.io/name: controller
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: default
        app.kubernetes.io/version: "v0.36.0"
        app.kubernetes.io/part-of: tekton-pipelines
        # tekton.dev/release value replaced with inputs.params.versionTag in pipeline/tekton/publish.yaml
        pipeline.tekton.dev/release: "v0.36.0"
        # labels below are related to istio and should not be used for resource lookup
        app: tekton-pipelines-controller
        version: "v0.36.0"
    spec:
      affinity:
        {{- toYaml .Values.controller.affinity | nindent 8 }}
      serviceAccountName: {{ .Values.controllerServiceAccount.name }}
      containers:
        {{- if .Values.controller.registryProxy.enabled }}
        - name: registry-proxy
          image: {{ .Values.controller.registryProxy.image }} # nginx
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.controller.registryProxy.port }}
              name: reg-proxy-port
          env:
            - name: NGINX_PORT
              value: {{ .Values.controller.registryProxy.port | quote }}
          volumeMounts:
            - name: registry-proxy-conf
              mountPath: /etc/nginx/conf.d/registry.conf
              subPath: registry.conf
        {{- end }}
        - name: tekton-pipelines-controller
          image: {{ .Values.controller.image }}
          imagePullPolicy: IfNotPresent
          args: [
            # These images are built on-demand by `ko resolve` and are replaced
            # by image references by digest.
            "-kubeconfig-writer-image", "{{ .Values.others.kubeconfigWriterImage }}",
            "-git-image", "{{ .Values.others.kubeconfigWriterImage }}",
            "-entrypoint-image", "{{ .Values.others.entrypointImage }}",
            "-nop-image", "{{ .Values.others.nopImage }}",
            "-imagedigest-exporter-image", "{{ .Values.others.imagedigestExporterImage }}",
            "-pr-image", "{{ .Values.others.prImage }}",
            "-workingdirinit-image", "{{ .Values.others.workingdirinitImage }}",
            # This is gcr.io/google.com/cloudsdktool/cloud-sdk:302.0.0-slim
            "-gsutil-image", "{{ .Values.others.gsutilImage }}",
            # The shell image must allow root in order to create directories and copy files to PVCs.
            # ghcr.io/distroless/busybox as of April 14 2022
            # image shall not contains tag, so it will be supported on a runtime like cri-o
            "-shell-image", "{{ .Values.others.shellImage }}",
            # for script mode to work with windows we need a powershell image
            # pinning to nanoserver tag as of July 15 2021
            "-shell-image-win", "{{ .Values.others.shellImageWin }}"
          ]
          volumeMounts:
            - name: config-logging
              mountPath: /etc/config-logging
            - name: config-registry-cert
              mountPath: /etc/config-registry-cert
          envFrom:
            - configMapRef:
                name: "tekton-pipelines-controller-envs"
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            {{- toYaml .Values.controller.securityContext | nindent 12 }}
          ports:
            - name: metrics
              containerPort: 9090
            - name: profiling
              containerPort: 8008
            - name: probes
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /health
              port: probes
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /readiness
              port: probes
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: config-logging
          configMap:
            name: config-logging
        - name: config-registry-cert
          configMap:
            name: config-registry-cert
        {{- if .Values.controller.registryProxy.enabled }}
        - name: registry-proxy-conf
          configMap:
            name: controller-registry-proxy-conf
        {{- end }}
