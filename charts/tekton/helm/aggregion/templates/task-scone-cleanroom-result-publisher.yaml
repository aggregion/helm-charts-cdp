{{- if (.Values.sconeCleanroom.enabled) -}}
{{- $name := .Release.Name -}}
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: "scone-result-publisher-{{ $name }}"
spec:
  params:
    - name: enclave-service-base-url
      description: Internal port of enclave service
    # Token for access to datasets
    - name: access-token
      description: 'AccessToken'
    # For dataset
    - name: dataset-dir
      description: "Dirname of dataset"
      default: {{ .Values.sconeCleanroom.commonParams.datasetDir | quote }}
    - name: dataset-filename
      description: "Filename of dataset"
      default: {{ .Values.sconeCleanroom.commonParams.datasetFilename | quote }}
    # For results
    - name: result-dir
      description: "Dirname for results"
      default: {{ .Values.sconeCleanroom.commonParams.resultDir | quote }}
    - name: result-filename
      description: "Filename of result file"
      default: {{ .Values.sconeCleanroom.commonParams.resultFilename | quote }}
    # For scripts
    - name: scripts-dir
      description: "Dirname of scripts"
      default: "/cache/scripts"
    - name: entrypoint
      description: "Executable file for running in python runner"
      default: main.py
    # Logs publishing
    - name: log-publish-path
      description: "Path of DCP for log publishing"
    - name: log-publish-token
      description: "Token for log publishing to DCP"
    - name: out-log-file-path
      description: "Path to log file"
      default: "out.log"
    - name: out-exitcode-file-path
      description: "File path for saving exit code of main process (1st step)"
      default: "exit-code.log"
    # Common
    - name: shared-vol-path
      description: "Shared volume path"
      default: "/cache" # Without trailing slash
  steps:
    - name: result-publisher
      image: "{{ .Values.sconeCleanroom.resultPublisher.image }}:{{ .Values.sconeCleanroom.resultPublisher.imageTag }}"
      imagePullPolicy: "{{ .Values.sconeCleanroom.resultPublisher.imagePullPolicy }}"
      timeout: "{{ .Values.sconeCleanroom.resultPublisher.timeout }}"
      securityContext:
        privileged: true
      volumeMounts:
        - name: vol
          mountPath: $(params.shared-vol-path)
        - name: dev-sgx
          mountPath: "{{ .Values.sgx.device }}"
      env:
        - name: "LAS_HOST"
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: "ENCLAVE_SERVICE_BASE_URL"
          value: "$(params.enclave-service-base-url)"
        # Token for access to datasets
        {{- if .Values.sconeCleanroom.jobTokenViaFile }}
        - name: "JOB_FILE_PATH"
          value: "$(params.shared-vol-path)/job-token.b64"
        {{- else }}
        - name: "JOB"
          value: "$(params.access-token)"
        {{- end }}
        # For dataset
        - name: "DATA_DIR"
          value: "$(params.shared-vol-path)/$(params.dataset-dir)"
        - name: "DATASET_PATH"
          value: "$(params.dataset-filename)"
        # For results
        - name: "RESULT_DIR"
          value: "$(params.shared-vol-path)/$(params.result-dir)"
        - name: "RESULT_PATH"
          value: "$(params.result-filename)"
        # Logs
        - name: "LOG_PATH"
          value: "$(params.shared-vol-path)/result-publisher-$(params.out-log-file-path)"
        - name: "MAIN_PROCESS_EXIT_CODE_PATH"
          value: "$(params.shared-vol-path)/$(params.out-exitcode-file-path)"
        # Other
        - name: "DATASERVICE_TOKEN"
          value: "{{ .Values.sconeCleanroom.dataserviceToken }}"
        - name: "DATASERVICE_URL"
          value: "{{ .Values.sconeCleanroom.dataserviceUrl }}"
        # For SCONE
        - name: "SESSION_NAME_FILE_PATH"
          value: "$(params.shared-vol-path)/result_publisher_session_name"
      envFrom:
        - configMapRef:
            name: "scone-cleanroom-common-config-{{ $name }}"
        - configMapRef:
            name: "scone-cleanroom-result-publisher-config-{{ $name }}"
        {{- if and .Values.metadataService.credentialsIV .Values.metadataService.credentialsKey }}
        - secretRef:
            name: "cleanroom-result-publisher-secret-{{ $name }}"
        {{- end }}
      resources:
        {{ .Values.sconeCleanroom.resultPublisher.resources | toJson }}
    - name: log-publisher
      image: {{ .Values.curl.image }}
      imagePullPolicy: IfNotPresent
      volumeMounts:
        - name: vol
          mountPath: $(params.shared-vol-path)
      # onError: continue
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      script: |
        #!/bin/sh
        echo "<--- result-publisher" >> $TEMP_LOG_PATH
        echo ">> begins with timed lines:" >> $TEMP_LOG_PATH
        cat $LOG_PATH | grep '^\[[[:digit:]]\{4\}-[[:digit:]]\{2\}-[[:digit:]]\{2\}.*\]' | head -n 2 >> $TEMP_LOG_PATH
        echo ">> ..." >> $TEMP_LOG_PATH
        echo ">> ends with timed lines:" >> $TEMP_LOG_PATH
        cat $LOG_PATH | grep '^\[[[:digit:]]\{4\}-[[:digit:]]\{2\}-[[:digit:]]\{2\}.*\]' | tail -n 2 >> $TEMP_LOG_PATH
        echo ">> last 10 lines of user log:"
        cat $LOG_PATH | grep -v '^\[SCONE' | tail -n 10 >> $TEMP_LOG_PATH
        echo ">> last 20 lines started with space:"
        tail -n 20 $TEMP_LOG_PATH | grep '^[[:space:]]' >> $TEMP_LOG_PATH
        echo "---> result-publisher" >> $TEMP_LOG_PATH
        curl -vvv -X POST -H "Content-Type: plain/text" -H "token: $(params.log-publish-token)" \
          --data-binary "@$TEMP_LOG_PATH" \
          $DCP_BASE_URL$(params.log-publish-path)
        exit `cat $MAIN_PROCESS_EXIT_CODE_PATH`
      env:
        # Logs
        - name: "LOG_PATH"
          value: "$(params.shared-vol-path)/result-publisher-$(params.out-log-file-path)"
        - name: "TEMP_LOG_PATH"
          value: "$(params.shared-vol-path)/common-$(params.out-log-file-path)"
        - name: "MAIN_PROCESS_EXIT_CODE_PATH"
          value: "$(params.shared-vol-path)/$(params.out-exitcode-file-path)"
      envFrom:
        - configMapRef:
            name: "scone-cleanroom-common-config-{{ $name }}"
{{- end -}}
