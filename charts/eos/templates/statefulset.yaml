{{- $fullName := include "eos.fullname" . }}
{{- $serviceName := printf "%s-headless" $fullName -}}
{{- $namespace := .Release.Namespace -}}
{{- $clusterBaseHost := .Values.clusterBaseHost -}}
{{- $hostnameSuffix := printf "%s.%s.svc.%s" $serviceName $namespace $clusterBaseHost -}}
{{- $addresses := list -}}
{{- range $i := until (.Values.replicaCount | int) }}
  {{- $podName := printf "%s-%d" $fullName $i -}}
  {{- $address := printf "%s.%s" $podName $hostnameSuffix -}}
  {{- $addresses = append $addresses $address -}}
{{- end }}
{{- $peers := join " " $addresses }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "eos.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: "{{ $fullName }}"
  selector:
    matchLabels:
      {{- include "eos.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "eos.selectorLabels" . | nindent 8 }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "eos.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8011
              protocol: TCP
            - name: p2p
              containerPort: 9011
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          volumeMounts:
            - name: data
              mountPath: {{ .Values.config.mountPath }}/data
            - name: blocks
              mountPath: {{ .Values.config.mountPath }}/blocks
            - name: config
              mountPath: {{ .Values.config.mountPath }}/config
          command: ["/bin/sh", "-c"]
          args:
            - >
              nodeos --access-control-allow-origin=* --http-validate-host=false --verbose-http-errors --contracts-console --plugin eosio::chain_plugin --plugin eosio::chain_api_plugin --plugin eosio::http_plugin --plugin eosio::history_plugin --plugin eosio::history_api_plugin
              {{- if .Values.config.isProducer }}
              --plugin eosio::producer_plugin --plugin eosio::producer_api_plugin --signature-provider "{{ .Values.config.signatureProvider }}"
              {{- range $i, $address := .Values.config.producerNames }}
              --producer-name {{ $address }}
              {{- end }}
              {{- if .Values.config.enableStaleProduction }}
              --enable-stale-production
              {{- end }}
              {{- end }}
              --http-server-address 0.0.0.0:8011 --http-max-response-time-ms {{ .Values.config.httpMaxResponseTimeMs }} --p2p-listen-endpoint 0.0.0.0:9011 --p2p-max-nodes-per-host={{ .Values.config.p2pMaxNodesPerHost }} --max-transaction-time={{ .Values.config.maxTransactionTime }} --abi-serializer-max-time-ms={{ .Values.config.abiSerializerMaxTimeMs }}
              {{- range $i, $address := .Values.config.p2pPeerAddresses }}
              --p2p-peer-address "{{ $address }}"
              {{- end }}
              $(echo -n $(echo -n {{ $peers }} | sed "s/$(hostname).{{ $hostnameSuffix }}//g") | sed "s/\([^ ]*\)/--p2p-peer-address \1/g")
              --data-dir "{{ .Values.config.mountPath }}/data"
              --blocks-dir "{{ .Values.config.mountPath }}/blocks"
              --config-dir "{{ .Values.config.mountPath }}/config"
              --sync-fetch-span {{ .Values.config.syncFetchSpan | default 100 }}
              {{- if .Values.config.validationMode }}
              --validation-mode {{ .Values.config.validationMode }}
              {{- end }}
              --chain-threads {{ .Values.config.chainThreads | default 2 }}
              --producer-threads {{ .Values.config.producerThreads | default 2 }}
              --net-threads {{ .Values.config.netThreads | default 2 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/sh", "-c", "kill -INT $(pidof nodeos)" ]
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: blocks
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.storage.blocks.storageClass }}
      storageClassName: "{{ .Values.storage.blocks.storageClass }}"
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.storage.blocks.size }}
  - metadata:
      name: config
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.storage.config.storageClass }}
      storageClassName: "{{ .Values.storage.config.storageClass }}"
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.storage.config.size }}
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.storage.blocks.storageClass }}
      storageClassName: "{{ .Values.storage.blocks.storageClass }}"
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.storage.data.size }}
