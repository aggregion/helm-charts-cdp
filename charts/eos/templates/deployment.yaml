apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "eos.fullname" . }}
  labels:
    {{- include "eos.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "eos.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "eos.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "eos.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          command:
          - nodeos
          args:
          - "--access-control-alow-origin=*"
          - "--http-validate-host=false"
          - "--verbose-http-errors"
          - "--contracts-console"
          - "--plugin"
          - "eosio::chain_plugin"
          - "--plugin"
          - "eosio::chain_api_plugin"
          - "--plugin"
          - "eosio::http_plugin"
          {{- if .Values.config.isProducer }}
          - "--plugin"
          - "eosio::producer_plugin"
          - "--plugin"
          - "eosio::producer_api_plugin"
          - "--signature-provider"
          - "{{ .Values.config.signatureProvider }}"
          {{ range $i, $address := .Values.config.producerNames }}
          - "--producer-name"
          - "{{ $address }}"
          {{- end }}
          {{- if .Values.config.enableStaleProduction }}
          - "--enable-stale-production"
          {{- end }}
          {{- end }}
          - "--http-server-address"
          - "0.0.0.0:8011"
          - "--http-max-response-time-ms"
          - "{{ .Values.config.httpMaxResponseTimeMs }}"
          - "--p2p-listen-endpoint"
          - "0.0.0.0:9011"
          - "--p2p-max-nodes-per-host={{ .Values.config.p2pMaxNodesPerHost }}"
          - "--max-transaction-time={{ .Values.config.maxTransactionTime }}"
          - "--abi-serializer-max-time-ms={{ .Values.config.abiSerializerMaxTimeMs }}"
          - "--data-dir"
          - "{{ .Values.config.mountPath }}/data"
          - "--blocks-dir"
          - "{{ .Values.config.mountPath }}/blocks"
          - "--config-dir"
          - "{{ .Values.config.mountPath }}/config"
          {{ range $i, $address := .Values.config.p2pPeerAddresses }}
          - "--p2p-peer-address"
          - "{{ $address }}"
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
