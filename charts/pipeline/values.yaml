# Default values for pipeline.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets:
  - name: aggregionregistry

nameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  nameOverride: ""

livenessProbe:
  enabled: true
  livenessPath: /healthcheck/liveness
  healthcheckPort: 9047
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

readinessProbe:
  enabled: true
  readinessPath: /healthcheck/readiness
  healthcheckPort: 9047
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

redis:
  host: redis
  port: 6379

cache:
  stopPipeline:
    ttl: 8640000
    prefix: stop_pipeline

# Runner creates Pipeline resources in k8s
runner:
  enabled: true
  # serviceAccountEnabled: if you want to rollout only service account without the deployment
  serviceAccountEnabled: true
  replicaCount: 1
  annotations:
    reloader.stakater.com/auto: "true"
  image:
    repository: registry.aggregion.com/pipeline-runner
    pullPolicy: IfNotPresent
    tag: 1e8c54fd
  probes:
    livenessPath: /healthcheck/liveness
    readinessPath: /healthcheck/readiness
    healthcheckPort: 9047
    healthcheckShutdownTimeoutMs: 5000
    livenessEnabled: false
    readinessEnabled: false
  configs:
    # amqpUrl: RabbitMQ instance from aggregion-externals chart. Should be common for DCP (CDP) and this service.
    amqpUrl: "amqp://..."
    ports:
      http:
        container: 6601
        service: 9100
    httpHostname: 0.0.0.0
    nodeEnv: production
    # runner.configs.pipelinesCreateQueueName should be equals to CDP.backend.configs.pipelineRunner.queue
    pipelinesCreateQueueName: create_pipeline_runner
    logLevel: info
    amqpPrefetchCount: 1
    # cloudEventsListener: URL to CloudEvent listener (the "watcher" presents in this chart)
    cloudEventsListener: "http://watcher:9101"
    pipelines:
      debugHasher:
        namespace: "pipelines"
        pvcSize: "10Mi"
        storageClassName: "default"
        annotations:
          aggregion.dev/instance: "common"
        podTemplate:
          nodeSelector:
            enclave: nodejs
        pipelineName: "debug-hasher"
      debugCleanroom:
        namespace: "pipelines"
        pvcSize: "1000Mi"
        storageClassName: "default"
        annotations:
          aggregion.dev/instance: "common"
        podTemplate:
          nodeSelector:
            enclave: nodejs
        pipelineName: "debug-cleanroom"
      sconeCleanroom:
        namespace: "pipelines"
        pvcSize: "1000Mi"
        storageClassName: "default"
        annotations:
          aggregion.dev/instance: "common"
        podTemplate:
          nodeSelector:
            enclave: sgx2
          volumes:
            - name: dev-sgx
              hostPath:
                path: /dev/sgx
        pipelineName: "scone-cleanroom"
    basePipelineOptions:
      namespace: "pipelines"
      pvcSize: "10Mi"
      storageClassName: "default"
      annotations:
        aggregion.dev/instance: "common"
      podTemplate: {}
  resources: {}
  restartPolicy: Always
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "6601"
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  updateStrategy: {}

stopper:
  enabled: true
  # serviceAccountEnabled: if you want to rollout only service account without the deployment
  serviceAccountEnabled: true
  replicaCount: 1
  annotations:
    reloader.stakater.com/auto: "true"
  image:
    repository: registry.aggregion.com/pipeline-stopper
    pullPolicy: IfNotPresent
    tag: 1e8c54fd
  probes:
    livenessPath: /healthcheck/liveness
    readinessPath: /healthcheck/readiness
    healthcheckPort: 9047
    healthcheckShutdownTimeoutMs: 5000
    livenessEnabled: false
    readinessEnabled: false
  configs:
    # amqpUrl: RabbitMQ instance from aggregion-externals chart. Should be common for DCP (CDP) and this service.
    amqpUrl: "amqp://..."
    ports:
      http:
        container: 6601
        service: 9100
    httpHostname: 0.0.0.0
    nodeEnv: production
    # runner.configs.pipelinesCreateQueueName should be equals to CDP.backend.configs.pipelineRunner.queue
    pipelinesQueueName: pipeline_stopper
    logLevel: info
    amqpPrefetchCount: 1
    # cloudEventsListener: URL to CloudEvent listener (the "watcher" presents in this chart)
    cloudEventsListener: "http://watcher:9101"
    pipelines:
      namespace: "pipelines"
  resources: {}
  restartPolicy: Always
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "6601"
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  updateStrategy: {}

watcher:
  enabled: true
  replicaCount: 1
  annotations:
    reloader.stakater.com/auto: "true"
  image:
    repository: registry.aggregion.com/pipeline-watcher
    pullPolicy: IfNotPresent
    tag: 4f5c9a1c
  probes:
    livenessPath: /healthcheck/liveness
    readinessPath: /healthcheck/readiness
    healthcheckPort: 9047
    healthcheckShutdownTimeoutMs: 5000
    livenessEnabled: false
    readinessEnabled: false
  configs:
    ports:
      http:
        container: 6602
        service: 9101
    httpHostname: 0.0.0.0
    nodeEnv: production
    logLevel: info
  resources: {}
  restartPolicy: Always
  nameOverride: ""
  fullnameOverride: ""
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "6602"
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  updateStrategy: {}
